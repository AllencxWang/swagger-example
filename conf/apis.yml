/SharedDocument/document:
  get:
    tags:
    - "Shared Document Manager"
    description: "shared documents list"
    operationId: "sharedDocGet"
    produces:
    - "application/json"
    parameters:
    - name: "sort"
      in: "query"
      required: false
      type: "string"
    - name: "order"
      in: "query"
      required: false
      type: "string"
    - name: "offset"
      in: "query"
      required: false
      type: "string"
    - name: "limit"
      in: "query"
      required: false
      type: "string"
    - name: "online"
      in: "query"
      required: false
      type: "string"
    - name: "status"
      in: "query"
      required: false
      type: "string"
    - name: "search"
      in: "query"
      required: false
      type: "string"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "SharedDocumentManager"
/SharedDocument/document/delete:
  delete:
    tags:
    - "Shared Document Manager"
    description: "shared documents delete"
    operationId: "sharedDocDel"
    produces:
    - "application/json"
    parameters: []
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "SharedDocumentManager"
/SharedDocument/document/download/{fileUID}:
  get:
    tags:
    - "Shared Document Manager"
    description: "shared documents list"
    operationId: "sharedDocDL"
    produces:
    - "application/json"
    parameters:
    - name: "fileUID"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "SharedDocumentManager"
/SharedDocument/document/upload:
  post:
    tags:
    - "Shared Document Manager"
    summary: ""
    operationId: "sharedDocUpload"
    consumes:
    - "multipart/form-data"
    produces:
    - "application/json"
    parameters:
    - name: "file"
      in: "formData"
      description: "The uploaded file data"
      required: true
      type: "file"
    - name: "fileDesc"
      in: "formData"
      description: "The uploaded file description"
      required: true
      type: "string"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "SharedDocumentManager"
/addresses:
  get:
    tags:
    - "Address Manager"
    description: "Returns addresses"
    operationId: "get"
    produces:
    - "application/json"
    parameters:
    - name: "TypeId"
      in: "query"
      description: "RA/DA"
      required: false
      type: "string"
    - name: "id"
      in: "query"
      description: "addr id"
      required: false
      type: "number"
      format: "double"
    - name: "sort"
      in: "query"
      description: "sort"
      required: false
      type: "string"
    - name: "order"
      in: "query"
      description: "order"
      required: false
      type: "string"
    - name: "offset"
      in: "query"
      description: "offset"
      required: false
      type: "number"
      format: "double"
    - name: "limit"
      in: "query"
      description: "limit"
      required: false
      type: "number"
      format: "double"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/AddressResponse"
    x-swagger-router-controller: "AddressManager"
  post:
    tags:
    - "Address Manager"
    summary: ""
    operationId: "post"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/AddressPostProperty"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "AddressManager"
/addresses/{addrid}:
  put:
    tags:
    - "Address Manager"
    summary: ""
    operationId: "put"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - name: "addrid"
      in: "path"
      required: true
      type: "number"
      format: "double"
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/AddressPutProperty"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "AddressManager"
/auth/oauth/revoke-token:
  post:
    tags:
    - "Auth"
    summary: "Logout and invaliate a token"
    operationId: "logout"
    produces:
    - "application/json"
    parameters:
    - name: "Authorization"
      in: "header"
      required: true
      type: "string"
      x-example: "Bearer access_token retrieved from auth endpoint."
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/LogoutResponse"
    x-swagger-router-controller: "Auth"
/auth/oauth/token:
  post:
    tags:
    - "Auth"
    summary: "Get Auth Token"
    description: "Authenticate user and retreive access token."
    operationId: "getAuthToken"
    consumes:
    - "application/x-www-form-urlencoded"
    produces:
    - "application/json"
    parameters:
    - name: "Authorization"
      in: "header"
      description: "Basic bXktY2xpZW50LXdpdGgtc2VjcmV0OnNlY3JldA=="
      required: false
      type: "string"
      x-example: "Basic bXktY2xpZW50LXdpdGgtc2VjcmV0OnNlY3JldA=="
    - name: "grant_type"
      in: "formData"
      description: "grant_type=password"
      required: true
      type: "string"
    - name: "username"
      in: "formData"
      description: "username=mcarney"
      required: true
      type: "string"
    - name: "password"
      in: "formData"
      description: "password=someSecurePassword"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/AuthTokenResponse"
    x-swagger-router-controller: "Auth"
/auth/users/{uid}/password:
  put:
    tags:
    - "Auth"
    summary: "Change user password"
    operationId: "changePassword"
    consumes:
    - "application/json"
    parameters:
    - name: "uid"
      in: "path"
      required: true
      type: "string"
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/anonymousRepresentation5"
    responses:
      200:
        description: "Status 200"
    x-swagger-router-controller: "Auth"
/client-administration/addressExclusions:
  get:
    tags:
    - "Client Administration Manager"
    summary: "get all address exclusions"
    operationId: "getAllAEX"
    produces:
    - "application/json"
    parameters: []
    responses:
      200:
        description: "Status 200"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/AddressExclusion"
    x-swagger-router-controller: "ClientAdministrationManager"
  post:
    tags:
    - "Client Administration Manager"
    summary: "add an address exclusion"
    operationId: "createAEX"
    consumes:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/AddressExclusion"
    responses:
      200:
        description: "Status 200"
    x-swagger-router-controller: "ClientAdministrationManager"
/client-administration/addressExclusions/{id}:
  get:
    tags:
    - "Client Administration Manager"
    summary: "get an address exclusion"
    operationId: "getAEX"
    produces:
    - "application/json"
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/AddressExclusion"
    x-swagger-router-controller: "ClientAdministrationManager"
  put:
    tags:
    - "Client Administration Manager"
    summary: "update an address exclusion"
    operationId: "updateAEX"
    consumes:
    - "application/json"
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "string"
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/AddressExclusion"
    responses:
      200:
        description: "Status 200"
    x-swagger-router-controller: "ClientAdministrationManager"
  delete:
    tags:
    - "Client Administration Manager"
    summary: "delete an address exclusion"
    operationId: "removeAEX"
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
    x-swagger-router-controller: "ClientAdministrationManager"
/client-administration/clientSettings/groupRules:
  get:
    tags:
    - "Client Administration Manager"
    summary: "get all settings of group rules"
    operationId: "getSettingsGroupRules"
    produces:
    - "application/json"
    parameters: []
    responses:
      200:
        description: "Status 200"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/anonymousRepresentation3"
    x-swagger-router-controller: "ClientAdministrationManager"
  put:
    tags:
    - "Client Administration Manager"
    summary: "post settings of group rules"
    operationId: "putSettingsGroupRules"
    consumes:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        type: "array"
        items:
          $ref: "#/definitions/anonymousRepresentation4"
    responses:
      200:
        description: "Status 200"
    x-swagger-router-controller: "ClientAdministrationManager"
/client-administration/clientSettings/{subManager}/dropdowns:
  get:
    tags:
    - "Client Administration Manager"
    summary: "get all dropdown values"
    operationId: "getClientDropdowns"
    produces:
    - "application/json"
    parameters:
    - name: "subManager"
      in: "path"
      required: true
      type: "string"
      x-example: "clientSettings"
    responses:
      200:
        description: "Status 200"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/getClientDropdowns"
    x-swagger-router-controller: "ClientAdministrationManager"
/client-administration/clientSettings/{subManager}/saved:
  get:
    tags:
    - "Client Administration Manager"
    summary: "get saved settings"
    operationId: "getClientSaved"
    produces:
    - "application/json"
    parameters:
    - name: "subManager"
      in: "path"
      required: true
      type: "string"
      x-example: "clientSettings"
    responses:
      200:
        description: "Status 200"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/ClientSaved"
    x-swagger-router-controller: "ClientAdministrationManager"
  put:
    tags:
    - "Client Administration Manager"
    summary: "put saved settings"
    operationId: "putClientSettings"
    consumes:
    - "application/json"
    parameters:
    - name: "subManager"
      in: "path"
      required: true
      type: "string"
      x-example: "clientSettings"
    - in: "body"
      name: "body"
      required: false
      schema:
        type: "array"
        items:
          $ref: "#/definitions/ClientSaved"
    responses:
      200:
        description: "Status 200"
    x-swagger-router-controller: "ClientAdministrationManager"
/client-administration/translations/{translationType}:
  get:
    tags:
    - "Client Administration Manager"
    summary: "Get all translation types"
    operationId: "getAllTransByType"
    produces:
    - "application/json"
    parameters:
    - name: "translationType"
      in: "path"
      description: "claims/documents/recipients"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/TranslationsGetOne"
    x-swagger-router-controller: "ClientAdministrationManager"
  post:
    tags:
    - "Client Administration Manager"
    summary: "Post add a new translation type"
    operationId: "postAddTransByType"
    consumes:
    - "application/json"
    parameters:
    - name: "translationType"
      in: "path"
      description: "claims/documents/recipients"
      required: true
      type: "string"
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/TranslationPostPut"
    responses:
      200:
        description: "Status 200"
    x-swagger-router-controller: "ClientAdministrationManager"
/client-administration/translations/{translationType}/clientTypes:
  get:
    tags:
    - "Client Administration Manager"
    summary: "Get all client document translation type options"
    operationId: "getClientTypeOptions"
    produces:
    - "application/json"
    parameters:
    - name: "translationType"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/TranslationClientTypeOptions"
    x-swagger-router-controller: "ClientAdministrationManager"
/client-administration/translations/{translationType}/normalizedTypes:
  get:
    tags:
    - "Client Administration Manager"
    summary: "Get all normalized translation type options"
    operationId: "getTransOptions"
    produces:
    - "application/json"
    parameters:
    - name: "translationType"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/TranslationTypeOptions"
    x-swagger-router-controller: "ClientAdministrationManager"
/client-administration/translations/{translationType}/{translationTypeId}:
  get:
    tags:
    - "Client Administration Manager"
    summary: "Get single translation type"
    operationId: "getTransByTypeId"
    produces:
    - "application/json"
    parameters:
    - name: "translationType"
      in: "path"
      description: "claims/documents/recipients"
      required: true
      type: "string"
    - name: "translationTypeId"
      in: "path"
      description: "123"
      required: true
      type: "integer"
      format: "int64"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/TranslationsGetOne"
    x-swagger-router-controller: "ClientAdministrationManager"
  put:
    tags:
    - "Client Administration Manager"
    summary: "Modify a translation Type"
    operationId: "putTransByTypeId"
    consumes:
    - "application/json"
    parameters:
    - name: "translationType"
      in: "path"
      description: "claims/documents/recipients"
      required: true
      type: "string"
    - name: "translationTypeId"
      in: "path"
      description: "123"
      required: true
      type: "integer"
      format: "int64"
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/TranslationPostPut"
    responses:
      200:
        description: "Status 200"
    x-swagger-router-controller: "ClientAdministrationManager"
/client-values-retrieval/client/all/{clientLayout}:
  get:
    tags:
    - "System Values"
    summary: "Get All Static Data Values"
    operationId: "get"
    produces:
    - "application/json"
    parameters:
    - name: "clientLayout"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/SystemValuesResponse"
    x-swagger-router-controller: "SystemValues"
/client-values-retrieval/client/client-address/{clientLayout}:
  get:
    tags:
    - "System Values"
    summary: "Get All Static Data Values"
    operationId: "getAddresses"
    produces:
    - "application/json"
    parameters:
    - name: "clientLayout"
      in: "path"
      required: true
      type: "string"
    - name: "addressType"
      in: "query"
      required: false
      type: "string"
    - name: "activeFlag"
      in: "query"
      required: false
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/AddressesResponse"
    x-swagger-router-controller: "SystemValues"
/document-management/document/address-details/document/{documentKey}:
  get:
    tags:
    - "Document Manager"
    summary: "Get Address Details of Document"
    description: "Pass document key in the request path"
    operationId: "address"
    produces:
    - "application/json"
    parameters:
    - name: "documentKey"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/AddressResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/copy-details/pdf/{documentKey}/{copyNumber}: {}
/document-management/document/copy-details/{documentKey}:
  get:
    tags:
    - "Document Manager"
    summary: "Get the list of copy information"
    operationId: "copyInfo"
    produces:
    - "application/json"
    parameters:
    - name: "documentKey"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/CopyInfoResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/delivery-info/document:
  post:
    tags:
    - "Document Manager"
    summary: "Get Delivery History of Document"
    description: "Pass in a document object"
    operationId: "deliveryHistory"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/Documents"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/DeliveryInfoResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/delivery-info/multilevel:
  post:
    tags:
    - "Document Manager"
    summary: "Get Delivery History of File or Group"
    description: "Pass in a document object"
    operationId: "deliveryHistory"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/File"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/DeliveryInfoResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/document-copy-pdf/{documentKey}/{copyNumber}:
  get:
    tags:
    - "Document Manager"
    summary: "Get PDF file for a doc copy"
    operationId: "copy"
    produces:
    - "application/json"
    parameters:
    - name: "documentKey"
      in: "path"
      required: true
      type: "string"
    - name: "copyNumber"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/external-tracking/{documentKey}/{copyNumber}:
  get:
    tags:
    - "Document Manager"
    summary: "Get the list of live tracking info"
    operationId: "trackingInfo"
    produces:
    - "application/json"
    parameters:
    - name: "documentKey"
      in: "path"
      required: true
      type: "string"
    - name: "copyNumber"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/TrackingDetailsResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/file-keys/override/{clientLayout}:
  get:
    tags:
    - "Document Manager"
    summary: "Get all File keys for an action and type filter."
    operationId: "getFileKeys"
    produces:
    - "application/json"
    parameters:
    - name: "clientLayout"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Array of file keys inside data."
        schema:
          $ref: "#/definitions/FileKeysResponse"
      400:
        description: "Status 400"
        schema:
          $ref: "#/definitions/ErrorResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/file-keys/{action}/{level}/{clientLayout}:
  get:
    tags:
    - "Document Manager"
    summary: "Get all File keys for an action and type filter."
    description: "Actions can be - Hold, Release, Route, Purge and all for global\
      \ search\nType can be - Document, Group, File and all for global search"
    operationId: "getFileKeys"
    produces:
    - "application/json"
    parameters:
    - name: "action"
      in: "path"
      required: true
      type: "string"
    - name: "level"
      in: "path"
      required: true
      type: "string"
    - name: "clientLayout"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Array of file keys inside data."
        schema:
          $ref: "#/definitions/FileKeysResponse"
      400:
        description: "Status 400"
        schema:
          $ref: "#/definitions/ErrorResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/file-keys/{clientLayout}:
  get:
    tags:
    - "Document Manager"
    summary: "Get all File keys for an action and type filter."
    operationId: "getFileKeys"
    produces:
    - "application/json"
    parameters:
    - name: "clientLayout"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Array of file keys inside data."
        schema:
          $ref: "#/definitions/FileKeysResponse"
      400:
        description: "Status 400"
        schema:
          $ref: "#/definitions/ErrorResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/global-search:
  post:
    tags:
    - "Document Manager"
    summary: "Global Search for document"
    operationId: "documentSearch"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/Search"
    - name: "sort"
      in: "query"
      required: false
      type: "string"
    - name: "order"
      in: "query"
      required: false
      type: "string"
    - name: "offset"
      in: "query"
      required: false
      type: "string"
    - name: "limit"
      in: "query"
      required: false
      type: "string"
    - name: "online"
      in: "query"
      required: false
      type: "string"
    - name: "status"
      in: "query"
      required: false
      type: "string"
    - name: "search"
      in: "query"
      required: false
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/DocumentFileResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/history-search:
  post:
    tags:
    - "Document Manager"
    summary: "Get document History"
    operationId: "documentSearch"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/HistorySearch"
    - name: "sort"
      in: "query"
      required: false
      type: "string"
    - name: "order"
      in: "query"
      required: false
      type: "string"
    - name: "offset"
      in: "query"
      required: false
      type: "string"
    - name: "limit"
      in: "query"
      required: false
      type: "string"
    - name: "online"
      in: "query"
      required: false
      type: "string"
    - name: "status"
      in: "query"
      required: false
      type: "string"
    - name: "search"
      in: "query"
      required: false
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/DocumentFileResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/hold-info/document:
  post:
    tags:
    - "Document Manager"
    summary: "Get previous hold transaction history of a document"
    description: "Pass in Document Object"
    operationId: "txnHistory"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/Documents"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/TransactionHistory"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/hold-info/multilevel:
  post:
    tags:
    - "Document Manager"
    summary: "Get previous hold transaction history of a file or group"
    description: "Pass in  File Object"
    operationId: "txnHistory"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/File"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/TransactionHistory"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/hold/document:
  post:
    tags:
    - "Document Manager"
    summary: "hold documents"
    operationId: "documentAction"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/HoldDocumentPost"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/TransactionResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/hold/multilevel:
  post:
    tags:
    - "Document Manager"
    summary: "hold files"
    description: "file/multilevel representations."
    operationId: "documentAction"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/HoldFilePost"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/TransactionResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/internal-tracking/{documentKey}/{copyId}:
  get:
    tags:
    - "Document Manager"
    summary: "Get the internal processing information for a document"
    operationId: "processInfo"
    produces:
    - "application/json"
    parameters:
    - name: "documentKey"
      in: "path"
      required: true
      type: "string"
    - name: "copyId"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/TrackingDetailsResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/management-search:
  post:
    tags:
    - "Document Manager"
    summary: "Search for document, file or group"
    operationId: "multiSearch"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/Search"
    - name: "sort"
      in: "query"
      required: false
      type: "string"
    - name: "order"
      in: "query"
      required: false
      type: "string"
    - name: "offset"
      in: "query"
      required: false
      type: "string"
    - name: "limit"
      in: "query"
      required: false
      type: "string"
    - name: "online"
      in: "query"
      required: false
      type: "string"
    - name: "status"
      in: "query"
      required: false
      type: "string"
    - name: "search"
      in: "query"
      required: false
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/DocumentFileResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/override/{clientLayout}:
  post:
    tags:
    - "Document Manager"
    summary: "override"
    description: "List of File Keys."
    operationId: "fileOverride"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - name: "clientLayout"
      in: "path"
      required: true
      type: "string"
    - in: "body"
      name: "body"
      required: false
      schema:
        type: "array"
        items:
          type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/FileKeysResponse"
      400:
        description: "Status 400"
        schema:
          $ref: "#/definitions/ErrorResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/purge/document:
  post:
    tags:
    - "Document Manager"
    summary: "purge documents"
    description: "list of documentIds"
    operationId: "documentAction"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/HoldDocumentPost"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/TransactionResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/purge/multilevel:
  post:
    tags:
    - "Document Manager"
    summary: "purge file or group"
    description: "file/multilevel representations."
    operationId: "documentAction"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/HoldFilePost"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/TransactionResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/release/document:
  post:
    tags:
    - "Document Manager"
    summary: "release documents"
    operationId: "documentAction"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/ReleaseDocumentPost"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/TransactionResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/release/multilevel:
  post:
    tags:
    - "Document Manager"
    summary: "release files"
    operationId: "documentAction"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/ReleaseFilePost"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/TransactionResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/route/document:
  post:
    tags:
    - "Document Manager"
    summary: "route documents"
    description: ""
    operationId: "documentAction"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/RouteDocumentPost"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/TransactionResponse"
    x-swagger-router-controller: "DocumentManager"
/document-management/document/route/multilevel:
  post:
    tags:
    - "Document Manager"
    summary: "route multilevel"
    operationId: "documentAction"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/RouteFilePost"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/TransactionResponse"
    x-swagger-router-controller: "DocumentManager"
/error-management/error/{errId}:
  get:
    tags:
    - "Error Manager"
    summary: "Get error by id"
    operationId: "errGetById"
    produces:
    - "application/json"
    parameters:
    - name: "errId"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/ErrorsDetailResponse"
    x-swagger-router-controller: "ErrorManager"
  put:
    tags:
    - "Error Manager"
    summary: "Put error status by id"
    operationId: "errPutById"
    consumes:
    - "application/json"
    parameters:
    - name: "errId"
      in: "path"
      required: true
      type: "string"
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/ErrorsDetailPut"
    responses:
      200:
        description: "Status 200"
    x-swagger-router-controller: "ErrorManager"
/error-management/error/{errId}/info:
  get:
    tags:
    - "Error Manager"
    summary: "Get error info by id"
    operationId: "errGetDetailListById"
    produces:
    - "application/json"
    parameters:
    - name: "errId"
      in: "path"
      required: true
      type: "string"
    - name: "sort"
      in: "query"
      required: false
      type: "string"
    - name: "order"
      in: "query"
      required: false
      type: "string"
    - name: "offset"
      in: "query"
      required: false
      type: "string"
    - name: "limit"
      in: "query"
      required: false
      type: "string"
    - name: "online"
      in: "query"
      required: false
      type: "string"
    - name: "status"
      in: "query"
      required: false
      type: "string"
    - name: "search"
      in: "query"
      required: false
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/ErrorsDetailInfoListResponse"
    x-swagger-router-controller: "ErrorManager"
/error-management/error/{errId}/status:
  get:
    tags:
    - "Error Manager"
    summary: "Get status of an error"
    description: "to get status of an error"
    operationId: "errGetStatus"
    produces:
    - "application/json"
    parameters:
    - name: "errId"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Success"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/anonymousRepresentation6"
    x-swagger-router-controller: "ErrorManager"
/error-management/errors:
  get:
    tags:
    - "Error Manager"
    summary: "Get all errors"
    operationId: "errGet"
    produces:
    - "application/json"
    parameters:
    - name: "sort"
      in: "query"
      required: false
      type: "string"
    - name: "order"
      in: "query"
      required: false
      type: "string"
    - name: "offset"
      in: "query"
      required: false
      type: "string"
    - name: "limit"
      in: "query"
      required: false
      type: "string"
    - name: "online"
      in: "query"
      required: false
      type: "string"
    - name: "status"
      in: "query"
      required: false
      type: "string"
    - name: "search"
      in: "query"
      required: false
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/ErrorsResponse"
    x-swagger-router-controller: "ErrorManager"
/error-management/errors/{manager}/{managerKey}:
  get:
    tags:
    - "Error Manager"
    summary: "get error id by document/file key"
    operationId: "getErrIdByKey"
    produces:
    - "application/json"
    parameters:
    - name: "manager"
      in: "path"
      required: true
      type: "string"
      x-example: "fileReceipts"
    - name: "managerKey"
      in: "path"
      description: "Integer or Integer+String"
      required: true
      type: "string"
      x-example: "70126789312054321CC"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/ErrorIdResponse"
    x-swagger-router-controller: "ErrorManager"
/error-management/reprocess/:
  post:
    tags:
    - "Error Manager"
    summary: "Reprocess an error"
    operationId: "errPostProcess"
    consumes:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/ErrorReprocess"
    responses:
      200:
        description: "Success"
    x-swagger-router-controller: "ErrorManager"
/file-receipt-tracking/FileReceipts:
  get:
    tags:
    - "File Receipt Manager"
    description: "Returns file receipts data to the caller"
    operationId: "getFileReceipts"
    produces:
    - "application/json"
    parameters:
    - name: "sort"
      in: "query"
      required: false
      type: "string"
    - name: "order"
      in: "query"
      required: false
      type: "string"
    - name: "offset"
      in: "query"
      required: false
      type: "string"
    - name: "limit"
      in: "query"
      required: false
      type: "string"
    - name: "online"
      in: "query"
      required: false
      type: "string"
    - name: "status"
      in: "query"
      required: false
      type: "string"
    - name: "search"
      in: "query"
      required: false
      type: "string"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "FileReceiptManager"
/file-receipt-tracking/FileReceipts/{key}:
  get:
    tags:
    - "File Receipt Manager"
    description: "Returns file receipts data to the caller"
    operationId: "key"
    produces:
    - "application/json"
    parameters:
    - name: "key"
      in: "path"
      description: "file key"
      required: true
      type: "string"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "FileReceiptManager"
/file-receipt-tracking/FileReceipts/{key}/download/abf-formatted:
  get:
    tags:
    - "File Receipt Manager"
    description: "Returns file receipts data to the caller"
    operationId: "abf"
    produces:
    - "application/json"
    parameters:
    - name: "key"
      in: "path"
      description: "file key"
      required: true
      type: "string"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "FileReceiptManager"
/file-receipt-tracking/FileReceipts/{key}/download/check-register:
  get:
    tags:
    - "File Receipt Manager"
    description: "Returns file receipts data to the caller"
    operationId: "check"
    produces:
    - "application/json"
    parameters:
    - name: "key"
      in: "path"
      description: "file key"
      required: true
      type: "string"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "FileReceiptManager"
/file-receipt-tracking/FileReceipts/{key}/download/original:
  get:
    tags:
    - "File Receipt Manager"
    description: "Returns file receipts data to the caller"
    operationId: "original"
    produces:
    - "application/json"
    parameters:
    - name: "key"
      in: "path"
      description: "file key"
      required: true
      type: "string"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "FileReceiptManager"
/file-receipt-tracking/FileReceipts/{key}/resend:
  get:
    tags:
    - "File Receipt Manager"
    description: "Returns file receipts data to the caller"
    operationId: "resend"
    produces:
    - "application/json"
    parameters:
    - name: "key"
      in: "path"
      description: "file key"
      required: true
      type: "string"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "FileReceiptManager"
/group-rule/group:
  post:
    tags:
    - "Group Rules Manager"
    summary: "add a new EmployerGroup"
    operationId: "egPostAdd"
    consumes:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/EmployerGroupPost"
    responses:
      200:
        description: "Status 200"
    x-swagger-router-controller: "GroupRulesManager"
  put:
    tags:
    - "Group Rules Manager"
    summary: "Modify Groups (Activate/Deactivate all)"
    description: "Used to activate/deactive a set of groups in one API call.  Could\
      \ be extended for other bulk uses in future."
    operationId: "egPutAll"
    consumes:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        type: "array"
        items:
          $ref: "#/definitions/EGPutStatus"
    responses:
      200:
        description: "Status 200"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/group/clientId/{clientID}:
  get:
    tags:
    - "Group Rules Manager"
    summary: "Get All Groups by a Client Layout"
    operationId: "getGroups"
    produces:
    - "application/json"
    parameters:
    - name: "clientID"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/EmployerGroupSingle"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/group/commitGroupRuleAssociation:
  post:
    tags:
    - "Group Rules Manager"
    summary: "Commit Rule Association"
    description: "Commit association"
    operationId: "updateRuleAssociation"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/anonymousRepresentation21"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/group/getGroupRuleAssociation:
  post:
    tags:
    - "Group Rules Manager"
    summary: "Get Bulk Group Group Rule Associations"
    description: "Get All Group Group Rule Associations"
    operationId: "getGroupsAssociations"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        type: "array"
        items:
          type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/GroupAssociationsResponse"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/group/getGroupRuleAssociation/{groupId}:
  get:
    tags:
    - "Group Rules Manager"
    summary: "Get Group Group Rule Associations"
    description: "Get Group Group Rule Associations"
    operationId: "getGroupAssociations"
    produces:
    - "application/json"
    parameters:
    - name: "groupId"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/GroupAssociationsResponse"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/group/getGroups/ruleAssociations/{ruleId}:
  get:
    tags:
    - "Group Rules Manager"
    summary: "Get All Groups by a Client Layout"
    operationId: "getGroupsRuleAssociation"
    produces:
    - "application/json"
    parameters:
    - name: "ruleId"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/EmployerGroupSingle"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/group/groupRuleAssociation/{groupId}/{ruleId}:
  post:
    tags:
    - "Group Rules Manager"
    summary: "Create Rule Association"
    description: "Create association"
    operationId: "createRuleAssociation"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - name: "groupId"
      in: "path"
      required: true
      type: "string"
    - name: "ruleId"
      in: "path"
      required: true
      type: "string"
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/anonymousRepresentation19"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/group/modifyGroupRuleAssociation:
  post:
    tags:
    - "Group Rules Manager"
    summary: "Update Rule Association"
    description: "Update association"
    operationId: "updateRuleAssociation"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/anonymousRepresentation20"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/group/{groupId}:
  get:
    tags:
    - "Group Rules Manager"
    summary: "get single EmployerGroup"
    operationId: "egGetOne"
    produces:
    - "application/json"
    parameters:
    - name: "groupId"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/EmployerGroupSingle"
    x-swagger-router-controller: "GroupRulesManager"
  put:
    tags:
    - "Group Rules Manager"
    summary: "modify an EmployerGroup"
    operationId: "egPut"
    consumes:
    - "application/json"
    parameters:
    - name: "groupId"
      in: "path"
      required: true
      type: "string"
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/EmployerGroupSingle"
    responses:
      200:
        description: "Status 200"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/rules:
  get:
    tags:
    - "Group Rules Manager"
    operationId: "getRules"
    produces:
    - "application/json"
    parameters: []
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
  post:
    tags:
    - "Group Rules Manager"
    operationId: "addRule"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/anonymousRepresentation17"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/rules/clone/{ruleID}/{status}:
  post:
    tags:
    - "Group Rules Manager"
    operationId: "copyRule"
    produces:
    - "application/json"
    parameters:
    - name: "ruleID"
      in: "path"
      required: true
      type: "string"
    - name: "status"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/rules/commit/multi:
  post:
    tags:
    - "Group Rules Manager"
    operationId: "commitRules"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/anonymousRepresentation12"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/rules/commit/{ruleID}:
  post:
    tags:
    - "Group Rules Manager"
    operationId: "commitRule"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - name: "ruleID"
      in: "path"
      required: true
      type: "string"
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/anonymousRepresentation13"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/rules/getGroupAssociations/{ruleId}:
  get:
    tags:
    - "Group Rules Manager"
    summary: "Get all Group Association Data for a Rule"
    operationId: "getGroupAssociationsByRule"
    produces:
    - "application/json"
    parameters:
    - name: "ruleId"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/RuleAssociationsResponse"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/rules/ruleType/{type}:
  get:
    tags:
    - "Group Rules Manager"
    operationId: "getRulesByType"
    produces:
    - "application/json"
    parameters:
    - name: "type"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/rules/ruleTypes/{clientLayout}:
  get:
    tags:
    - "Group Rules Manager"
    summary: "Get All RuleTypes for a given ClientLayout"
    operationId: "getRuleTypesByClientLayout"
    produces:
    - "application/json"
    parameters:
    - name: "clientLayout"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/anonymousRepresentation18"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/rules/{ruleID}:
  get:
    tags:
    - "Group Rules Manager"
    operationId: "getRule"
    produces:
    - "application/json"
    parameters:
    - name: "ruleID"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
  post:
    tags:
    - "Group Rules Manager"
    operationId: "createTestRule"
    produces:
    - "application/json"
    parameters:
    - name: "ruleID"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
  put:
    tags:
    - "Group Rules Manager"
    operationId: "editRule"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - name: "ruleID"
      in: "path"
      required: true
      type: "string"
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/anonymousRepresentation16"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/rules/{ruleID}/details:
  post:
    tags:
    - "Group Rules Manager"
    operationId: "addRuleDetails"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - name: "ruleID"
      in: "path"
      required: true
      type: "string"
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/anonymousRepresentation15"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
  put:
    tags:
    - "Group Rules Manager"
    operationId: "modifyDetailRecord"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - name: "ruleID"
      in: "path"
      required: true
      type: "string"
    - in: "body"
      name: "body"
      required: false
      schema:
        type: "array"
        items:
          $ref: "#/definitions/anonymousRepresentation14"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
  delete:
    tags:
    - "Group Rules Manager"
    operationId: "deleteDetailRecord"
    produces:
    - "application/json"
    parameters:
    - name: "ruleID"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
/group-rule/rules/{ruleID}/{status}/details:
  get:
    tags:
    - "Group Rules Manager"
    operationId: "getDetailRecords"
    produces:
    - "application/json"
    parameters:
    - name: "ruleID"
      in: "path"
      required: true
      type: "string"
    - name: "status"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "GroupRulesManager"
/message/login-messages/{clientLayout}/{userType}:
  get:
    tags:
    - "Messages"
    summary: "Get all list of messages"
    operationId: "getMessages"
    produces:
    - "application/json"
    parameters:
    - name: "clientLayout"
      in: "path"
      required: true
      type: "string"
    - name: "userType"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/MessageResponse"
    x-swagger-router-controller: "Messages"
/on-hold-report/reports/onholdreport:
  post:
    tags:
    - "Report Manager"
    operationId: "onHoldReport"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/OnHoldReportPost"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "ReportManager"
/report-manager/reports/userreport:
  post:
    tags:
    - "Report Manager"
    summary: "Get the user report"
    operationId: "userReport"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/anonymousRepresentation7"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/UserReportResponse"
    x-swagger-router-controller: "ReportManager"
/reporting/client-image-report:
  get:
    tags:
    - "Report Manager"
    operationId: "clientImageReport"
    produces:
    - "application/pdf"
    parameters:
    - name: "env"
      in: "query"
      description: "test/production"
      required: true
      type: "string"
    - name: "clientId"
      in: "query"
      description: "0002"
      required: true
      type: "string"
    - name: "layoutId"
      in: "query"
      description: "028"
      required: false
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "ReportManager"
/reporting/client-information-report:
  get:
    tags:
    - "Report Manager"
    summary: "Get client information report"
    operationId: "clientInfoReport"
    produces:
    - "application/json"
    parameters:
    - name: "context"
      in: "query"
      required: true
      type: "string"
    - name: "layoutId"
      in: "query"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "ReportManager"
/reporting/on-hold-report: {}
/security-context/security/context:
  get:
    tags:
    - "Auth"
    summary: "Get profile/security context for a user."
    operationId: "getSecurityContext"
    produces:
    - "application/json"
    parameters:
    - name: "Authorization"
      in: "header"
      required: true
      type: "string"
      x-example: "Bearer access_token retrieved from auth endpoint."
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/ContextResponse"
    x-swagger-router-controller: "Auth"
/security-manager/dataSources:
  get:
    tags:
    - "Security Manager"
    summary: "Get all data sources"
    description: "to get all data sources"
    operationId: "dataSources"
    produces:
    - "application/json"
    parameters: []
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/dataSource"
    x-swagger-router-controller: "SecurityManager"
/security-manager/permissions:
  get:
    tags:
    - "Security Manager"
    operationId: "permissions"
    produces:
    - "application/json"
    parameters:
    - name: "order"
      in: "query"
      required: false
      type: "string"
    - name: "offset"
      in: "query"
      required: false
      type: "integer"
      format: "int32"
    - name: "limit"
      in: "query"
      required: false
      type: "integer"
      format: "int32"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "SecurityManager"
/security-manager/roles:
  get:
    tags:
    - "Security Manager"
    summary: "Get all roles"
    description: "to get all roles"
    operationId: "roles"
    produces:
    - "application/json"
    parameters:
    - name: "sort"
      in: "query"
      required: false
      type: "string"
    - name: "order"
      in: "query"
      required: false
      type: "string"
    - name: "offset"
      in: "query"
      required: false
      type: "string"
    - name: "limit"
      in: "query"
      required: false
      type: "string"
    - name: "online"
      in: "query"
      required: false
      type: "string"
    - name: "status"
      in: "query"
      required: false
      type: "string"
    - name: "search"
      in: "query"
      required: false
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/role"
    x-swagger-router-controller: "SecurityManager"
  post:
    tags:
    - "Security Manager"
    summary: "add roles"
    operationId: "addRole"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/anonymousRepresentation8"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "SecurityManager"
  delete:
    tags:
    - "Security Manager"
    summary: "Delete Roles"
    operationId: "delRole"
    produces:
    - "application/json"
    parameters: []
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "SecurityManager"
/security-manager/roles/{roleId}:
  get:
    tags:
    - "Security Manager"
    summary: "Get single role"
    description: "to get single role"
    operationId: "roleById"
    produces:
    - "application/json"
    parameters:
    - name: "roleId"
      in: "path"
      required: true
      type: "integer"
      format: "int64"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "SecurityManager"
  put:
    tags:
    - "Security Manager"
    summary: "modify a role"
    operationId: "putRole"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - name: "roleId"
      in: "path"
      required: true
      type: "integer"
      format: "int64"
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/anonymousRepresentation10"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "SecurityManager"
/security-manager/users:
  get:
    tags:
    - "Security Manager"
    summary: "Get all users"
    description: "to get all users"
    operationId: "users"
    produces:
    - "application/json"
    parameters:
    - name: "sort"
      in: "query"
      required: false
      type: "string"
    - name: "order"
      in: "query"
      required: false
      type: "string"
    - name: "offset"
      in: "query"
      required: false
      type: "string"
    - name: "limit"
      in: "query"
      required: false
      type: "string"
    - name: "online"
      in: "query"
      required: false
      type: "string"
    - name: "status"
      in: "query"
      required: false
      type: "string"
    - name: "search"
      in: "query"
      required: false
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "SecurityManager"
  post:
    tags:
    - "Security Manager"
    summary: "add a user"
    operationId: "addUser"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/UserProperty"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "SecurityManager"
/security-manager/users/ucws/{uid}:
  get:
    tags:
    - "Security Manager"
    summary: "Get a List of UCW/Role Mapping for a User"
    description: "Get a List of UCW/Role Mapping for a User"
    operationId: "getContextRoles"
    produces:
    - "application/json"
    parameters:
    - name: "uid"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          type: "array"
          items:
            $ref: "#/definitions/ucwAssociation"
    x-swagger-router-controller: "SecurityManager"
  put:
    tags:
    - "Security Manager"
    summary: "Assign user to a context"
    operationId: "assignRoles"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - name: "uid"
      in: "path"
      required: true
      type: "string"
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/anonymousRepresentation9"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "SecurityManager"
/security-manager/users/{uid}:
  get:
    tags:
    - "Security Manager"
    description: "to get a specific user data"
    operationId: "user"
    produces:
    - "application/json"
    parameters:
    - name: "uid"
      in: "path"
      description: "user id"
      required: true
      type: "string"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "SecurityManager"
  put:
    tags:
    - "Security Manager"
    summary: "modify a user"
    operationId: "modifyUser"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - name: "uid"
      in: "path"
      description: "user id"
      required: true
      type: "string"
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/UserProperty"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "SecurityManager"
/security-manager/users/{uid}/resetPwd:
  get:
    tags:
    - "Security Manager"
    description: "to reset the user password"
    operationId: "resetPwd"
    produces:
    - "application/json"
    parameters:
    - name: "uid"
      in: "path"
      description: "user id"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "SecurityManager"
/security-manager/users/{uid}/terminate:
  get:
    tags:
    - "Security Manager"
    summary: "Terminate the user session"
    operationId: "termUser"
    parameters:
    - name: "uid"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
    x-swagger-router-controller: "SecurityManager"
/swagger: {}
/system-values-retrieval/system/all/:
  get:
    tags:
    - "System Values"
    summary: "Get All Static Data Values"
    operationId: "getSysValues"
    produces:
    - "application/json"
    parameters: []
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/SystemValuesResponse"
    x-swagger-router-controller: "SystemValues"
/testfile-manager/download/{type}/{id}:
  get:
    tags:
    - "Test File Manager"
    summary: "Download output file"
    description: "Download test file output"
    operationId: "downloadFile"
    produces:
    - "application/json"
    parameters:
    - name: "type"
      in: "path"
      description: "'pdf' or 'xml'"
      required: true
      type: "string"
    - name: "id"
      in: "path"
      description: "'pdfId' or 'xmlId'"
      required: true
      type: "string"
    responses:
      200:
        description: "Success"
        schema:
          $ref: "#/definitions/StandardResponse"
    x-swagger-router-controller: "TestFileManager"
/testfile-manager/files:
  get:
    tags:
    - "Test File Manager"
    summary: "Get all test files"
    description: " "
    operationId: "getTestFiles"
    produces:
    - "application/json"
    parameters:
    - name: "sort"
      in: "query"
      required: false
      type: "string"
    - name: "order"
      in: "query"
      required: false
      type: "string"
    - name: "offset"
      in: "query"
      required: false
      type: "string"
    - name: "limit"
      in: "query"
      required: false
      type: "string"
    - name: "online"
      in: "query"
      required: false
      type: "string"
    - name: "status"
      in: "query"
      required: false
      type: "string"
    - name: "search"
      in: "query"
      required: false
      type: "string"
    responses:
      200:
        description: ""
        schema:
          type: "array"
          items:
            $ref: "#/definitions/TestFile"
    x-swagger-router-controller: "TestFileManager"
  post:
    tags:
    - "Test File Manager"
    summary: "Add a test file"
    description: ""
    operationId: "uploadFile"
    consumes:
    - "multipart/form-data"
    produces:
    - "application/json"
    parameters:
    - name: "file"
      in: "formData"
      description: "The uploaded file data"
      required: false
      type: "file"
    - name: "email"
      in: "formData"
      description: "email"
      required: true
      type: "string"
    responses:
      200:
        description: "Status 200"
        schema:
          $ref: "#/definitions/TestFile"
    x-swagger-router-controller: "TestFileManager"
/testfile-manager/files/{fileKey}:
  get:
    tags:
    - "Test File Manager"
    summary: "Get the detail info by a file key"
    description: ""
    operationId: "getTestFileByKey"
    produces:
    - "application/json"
    parameters:
    - name: "fileKey"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: ""
        schema:
          $ref: "#/definitions/TestFile"
    x-swagger-router-controller: "TestFileManager"
  put:
    tags:
    - "Test File Manager"
    summary: "Update the access level"
    operationId: "updateAccessLevel"
    consumes:
    - "application/json"
    produces:
    - "application/json"
    parameters:
    - name: "fileKey"
      in: "path"
      required: true
      type: "string"
    - in: "body"
      name: "body"
      required: false
      schema:
        $ref: "#/definitions/anonymousRepresentation11"
    responses:
      200:
        description: ""
        schema:
          $ref: "#/definitions/TestFile"
    x-swagger-router-controller: "TestFileManager"
/testfile-manager/files/{fileKey}/resubmit:
  get:
    tags:
    - "Test File Manager"
    summary: "To resubmit by a file key"
    description: ""
    operationId: "resubmit"
    produces:
    - "application/json"
    parameters:
    - name: "fileKey"
      in: "path"
      required: true
      type: "string"
    responses:
      200:
        description: ""
        schema:
          $ref: "#/definitions/TestFile"
    x-swagger-router-controller: "TestFileManager"