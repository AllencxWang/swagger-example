---
swagger: "2.0"
info:
  description: "No description"
  version: "0.0.1"
  title: "CHPS API contract online"
  contact: {}
host: "localhost:10010"
tags:
- name: "Auth"
- name: "Address Manager"
- name: "Client Administration Manager"
- name: "Document Manager"
- name: "Error Manager"
- name: "File Receipt Manager"
- name: "Report Manager"
- name: "Security Manager"
- name: "Shared Document Manager"
- name: "Test File Manager"
- name: "System Values"
- name: "Messages"
- name: "Group Rules Manager"
- name: "General"
schemes:
- "http"
paths:
  /SharedDocument/document:
    get:
      tags:
      - "Shared Document Manager"
      description: "shared documents list"
      operationId: "sharedDocGet"
      produces:
      - "application/json"
      parameters:
      - name: "sort"
        in: "query"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "online"
        in: "query"
        required: false
        type: "string"
      - name: "status"
        in: "query"
        required: false
        type: "string"
      - name: "search"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "SharedDocumentManager"
  /SharedDocument/document/delete:
    delete:
      tags:
      - "Shared Document Manager"
      description: "shared documents delete"
      operationId: "sharedDocDel"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "SharedDocumentManager"
  /SharedDocument/document/download/{fileUID}:
    get:
      tags:
      - "Shared Document Manager"
      description: "shared documents list"
      operationId: "sharedDocDL"
      produces:
      - "application/json"
      parameters:
      - name: "fileUID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "SharedDocumentManager"
  /SharedDocument/document/upload:
    post:
      tags:
      - "Shared Document Manager"
      summary: ""
      operationId: "sharedDocUpload"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "file"
        in: "formData"
        description: "The uploaded file data"
        required: true
        type: "file"
      - name: "fileDesc"
        in: "formData"
        description: "The uploaded file description"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "SharedDocumentManager"
  /addresses:
    get:
      tags:
      - "Address Manager"
      description: "Returns addresses"
      operationId: "get"
      produces:
      - "application/json"
      parameters:
      - name: "TypeId"
        in: "query"
        description: "RA/DA"
        required: false
        type: "string"
      - name: "id"
        in: "query"
        description: "addr id"
        required: false
        type: "number"
        format: "double"
      - name: "sort"
        in: "query"
        description: "sort"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        description: "order"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        type: "number"
        format: "double"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "number"
        format: "double"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/AddressResponse"
      x-swagger-router-controller: "AddressManager"
    post:
      tags:
      - "Address Manager"
      summary: ""
      operationId: "post"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AddressPostProperty"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "AddressManager"
  /addresses/{addrid}:
    put:
      tags:
      - "Address Manager"
      summary: ""
      operationId: "put"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "addrid"
        in: "path"
        required: true
        type: "number"
        format: "double"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AddressPutProperty"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "AddressManager"
  /auth/oauth/revoke-token:
    post:
      tags:
      - "Auth"
      summary: "Logout and invaliate a token"
      operationId: "logout"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        x-example: "Bearer access_token retrieved from auth endpoint."
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/LogoutResponse"
      x-swagger-router-controller: "Auth"
  /auth/oauth/token:
    post:
      tags:
      - "Auth"
      summary: "Get Auth Token"
      description: "Authenticate user and retreive access token."
      operationId: "getAuthToken"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "Basic bXktY2xpZW50LXdpdGgtc2VjcmV0OnNlY3JldA=="
        required: false
        type: "string"
        x-example: "Basic bXktY2xpZW50LXdpdGgtc2VjcmV0OnNlY3JldA=="
      - name: "grant_type"
        in: "formData"
        description: "grant_type=password"
        required: true
        type: "string"
      - name: "username"
        in: "formData"
        description: "username=mcarney"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "password=someSecurePassword"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/AuthTokenResponse"
      x-swagger-router-controller: "Auth"
  /auth/users/{uid}/password:
    put:
      tags:
      - "Auth"
      summary: "Change user password"
      operationId: "changePassword"
      consumes:
      - "application/json"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/anonymousRepresentation5"
      responses:
        200:
          description: "Status 200"
      x-swagger-router-controller: "Auth"
  /client-administration/addressExclusions:
    get:
      tags:
      - "Client Administration Manager"
      summary: "get all address exclusions"
      operationId: "getAllAEX"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AddressExclusion"
      x-swagger-router-controller: "ClientAdministrationManager"
    post:
      tags:
      - "Client Administration Manager"
      summary: "add an address exclusion"
      operationId: "createAEX"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AddressExclusion"
      responses:
        200:
          description: "Status 200"
      x-swagger-router-controller: "ClientAdministrationManager"
  /client-administration/addressExclusions/{id}:
    get:
      tags:
      - "Client Administration Manager"
      summary: "get an address exclusion"
      operationId: "getAEX"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/AddressExclusion"
      x-swagger-router-controller: "ClientAdministrationManager"
    put:
      tags:
      - "Client Administration Manager"
      summary: "update an address exclusion"
      operationId: "updateAEX"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/AddressExclusion"
      responses:
        200:
          description: "Status 200"
      x-swagger-router-controller: "ClientAdministrationManager"
    delete:
      tags:
      - "Client Administration Manager"
      summary: "delete an address exclusion"
      operationId: "removeAEX"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
      x-swagger-router-controller: "ClientAdministrationManager"
  /client-administration/clientSettings/groupRules:
    get:
      tags:
      - "Client Administration Manager"
      summary: "get all settings of group rules"
      operationId: "getSettingsGroupRules"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/anonymousRepresentation3"
      x-swagger-router-controller: "ClientAdministrationManager"
    put:
      tags:
      - "Client Administration Manager"
      summary: "post settings of group rules"
      operationId: "putSettingsGroupRules"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/anonymousRepresentation4"
      responses:
        200:
          description: "Status 200"
      x-swagger-router-controller: "ClientAdministrationManager"
  /client-administration/clientSettings/{subManager}/dropdowns:
    get:
      tags:
      - "Client Administration Manager"
      summary: "get all dropdown values"
      operationId: "getClientDropdowns"
      produces:
      - "application/json"
      parameters:
      - name: "subManager"
        in: "path"
        required: true
        type: "string"
        x-example: "clientSettings"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/getClientDropdowns"
      x-swagger-router-controller: "ClientAdministrationManager"
  /client-administration/clientSettings/{subManager}/saved:
    get:
      tags:
      - "Client Administration Manager"
      summary: "get saved settings"
      operationId: "getClientSaved"
      produces:
      - "application/json"
      parameters:
      - name: "subManager"
        in: "path"
        required: true
        type: "string"
        x-example: "clientSettings"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ClientSaved"
      x-swagger-router-controller: "ClientAdministrationManager"
    put:
      tags:
      - "Client Administration Manager"
      summary: "put saved settings"
      operationId: "putClientSettings"
      consumes:
      - "application/json"
      parameters:
      - name: "subManager"
        in: "path"
        required: true
        type: "string"
        x-example: "clientSettings"
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/ClientSaved"
      responses:
        200:
          description: "Status 200"
      x-swagger-router-controller: "ClientAdministrationManager"
  /client-administration/translations/{translationType}:
    get:
      tags:
      - "Client Administration Manager"
      summary: "Get all translation types"
      operationId: "getAllTransByType"
      produces:
      - "application/json"
      parameters:
      - name: "translationType"
        in: "path"
        description: "claims/documents/recipients"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TranslationsGetOne"
      x-swagger-router-controller: "ClientAdministrationManager"
    post:
      tags:
      - "Client Administration Manager"
      summary: "Post add a new translation type"
      operationId: "postAddTransByType"
      consumes:
      - "application/json"
      parameters:
      - name: "translationType"
        in: "path"
        description: "claims/documents/recipients"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TranslationPostPut"
      responses:
        200:
          description: "Status 200"
      x-swagger-router-controller: "ClientAdministrationManager"
  /client-administration/translations/{translationType}/clientTypes:
    get:
      tags:
      - "Client Administration Manager"
      summary: "Get all client document translation type options"
      operationId: "getClientTypeOptions"
      produces:
      - "application/json"
      parameters:
      - name: "translationType"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TranslationClientTypeOptions"
      x-swagger-router-controller: "ClientAdministrationManager"
  /client-administration/translations/{translationType}/normalizedTypes:
    get:
      tags:
      - "Client Administration Manager"
      summary: "Get all normalized translation type options"
      operationId: "getTransOptions"
      produces:
      - "application/json"
      parameters:
      - name: "translationType"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TranslationTypeOptions"
      x-swagger-router-controller: "ClientAdministrationManager"
  /client-administration/translations/{translationType}/{translationTypeId}:
    get:
      tags:
      - "Client Administration Manager"
      summary: "Get single translation type"
      operationId: "getTransByTypeId"
      produces:
      - "application/json"
      parameters:
      - name: "translationType"
        in: "path"
        description: "claims/documents/recipients"
        required: true
        type: "string"
      - name: "translationTypeId"
        in: "path"
        description: "123"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/TranslationsGetOne"
      x-swagger-router-controller: "ClientAdministrationManager"
    put:
      tags:
      - "Client Administration Manager"
      summary: "Modify a translation Type"
      operationId: "putTransByTypeId"
      consumes:
      - "application/json"
      parameters:
      - name: "translationType"
        in: "path"
        description: "claims/documents/recipients"
        required: true
        type: "string"
      - name: "translationTypeId"
        in: "path"
        description: "123"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/TranslationPostPut"
      responses:
        200:
          description: "Status 200"
      x-swagger-router-controller: "ClientAdministrationManager"
  /client-values-retrieval/client/all/{clientLayout}:
    get:
      tags:
      - "System Values"
      summary: "Get All Static Data Values"
      operationId: "get"
      produces:
      - "application/json"
      parameters:
      - name: "clientLayout"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/SystemValuesResponse"
      x-swagger-router-controller: "SystemValues"
  /client-values-retrieval/client/client-address/{clientLayout}:
    get:
      tags:
      - "System Values"
      summary: "Get All Static Data Values"
      operationId: "getAddresses"
      produces:
      - "application/json"
      parameters:
      - name: "clientLayout"
        in: "path"
        required: true
        type: "string"
      - name: "addressType"
        in: "query"
        required: false
        type: "string"
      - name: "activeFlag"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/AddressesResponse"
      x-swagger-router-controller: "SystemValues"
  /document-management/document/address-details/document/{documentKey}:
    get:
      tags:
      - "Document Manager"
      summary: "Get Address Details of Document"
      description: "Pass document key in the request path"
      operationId: "address"
      produces:
      - "application/json"
      parameters:
      - name: "documentKey"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/AddressResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/copy-details/pdf/{documentKey}/{copyNumber}: {}
  /document-management/document/copy-details/{documentKey}:
    get:
      tags:
      - "Document Manager"
      summary: "Get the list of copy information"
      operationId: "copyInfo"
      produces:
      - "application/json"
      parameters:
      - name: "documentKey"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/CopyInfoResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/delivery-info/document:
    post:
      tags:
      - "Document Manager"
      summary: "Get Delivery History of Document"
      description: "Pass in a document object"
      operationId: "deliveryHistory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Documents"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/DeliveryInfoResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/delivery-info/multilevel:
    post:
      tags:
      - "Document Manager"
      summary: "Get Delivery History of File or Group"
      description: "Pass in a document object"
      operationId: "deliveryHistory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/File"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/DeliveryInfoResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/document-copy-pdf/{documentKey}/{copyNumber}:
    get:
      tags:
      - "Document Manager"
      summary: "Get PDF file for a doc copy"
      operationId: "copy"
      produces:
      - "application/json"
      parameters:
      - name: "documentKey"
        in: "path"
        required: true
        type: "string"
      - name: "copyNumber"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/external-tracking/{documentKey}/{copyNumber}:
    get:
      tags:
      - "Document Manager"
      summary: "Get the list of live tracking info"
      operationId: "trackingInfo"
      produces:
      - "application/json"
      parameters:
      - name: "documentKey"
        in: "path"
        required: true
        type: "string"
      - name: "copyNumber"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/TrackingDetailsResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/file-keys/override/{clientLayout}:
    get:
      tags:
      - "Document Manager"
      summary: "Get all File keys for an action and type filter."
      operationId: "getFileKeys"
      produces:
      - "application/json"
      parameters:
      - name: "clientLayout"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Array of file keys inside data."
          schema:
            $ref: "#/definitions/FileKeysResponse"
        400:
          description: "Status 400"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/file-keys/{action}/{level}/{clientLayout}:
    get:
      tags:
      - "Document Manager"
      summary: "Get all File keys for an action and type filter."
      description: "Actions can be - Hold, Release, Route, Purge and all for global\
        \ search\nType can be - Document, Group, File and all for global search"
      operationId: "getFileKeys"
      produces:
      - "application/json"
      parameters:
      - name: "action"
        in: "path"
        required: true
        type: "string"
      - name: "level"
        in: "path"
        required: true
        type: "string"
      - name: "clientLayout"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Array of file keys inside data."
          schema:
            $ref: "#/definitions/FileKeysResponse"
        400:
          description: "Status 400"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/file-keys/{clientLayout}:
    get:
      tags:
      - "Document Manager"
      summary: "Get all File keys for an action and type filter."
      operationId: "getFileKeys"
      produces:
      - "application/json"
      parameters:
      - name: "clientLayout"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Array of file keys inside data."
          schema:
            $ref: "#/definitions/FileKeysResponse"
        400:
          description: "Status 400"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/global-search:
    post:
      tags:
      - "Document Manager"
      summary: "Global Search for document"
      operationId: "documentSearch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Search"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "online"
        in: "query"
        required: false
        type: "string"
      - name: "status"
        in: "query"
        required: false
        type: "string"
      - name: "search"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/DocumentFileResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/history-search:
    post:
      tags:
      - "Document Manager"
      summary: "Get document History"
      operationId: "documentSearch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/HistorySearch"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "online"
        in: "query"
        required: false
        type: "string"
      - name: "status"
        in: "query"
        required: false
        type: "string"
      - name: "search"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/DocumentFileResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/hold-info/document:
    post:
      tags:
      - "Document Manager"
      summary: "Get previous hold transaction history of a document"
      description: "Pass in Document Object"
      operationId: "txnHistory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Documents"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/TransactionHistory"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/hold-info/multilevel:
    post:
      tags:
      - "Document Manager"
      summary: "Get previous hold transaction history of a file or group"
      description: "Pass in  File Object"
      operationId: "txnHistory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/File"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/TransactionHistory"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/hold/document:
    post:
      tags:
      - "Document Manager"
      summary: "hold documents"
      operationId: "documentAction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/HoldDocumentPost"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/TransactionResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/hold/multilevel:
    post:
      tags:
      - "Document Manager"
      summary: "hold files"
      description: "file/multilevel representations."
      operationId: "documentAction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/HoldFilePost"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/TransactionResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/internal-tracking/{documentKey}/{copyId}:
    get:
      tags:
      - "Document Manager"
      summary: "Get the internal processing information for a document"
      operationId: "processInfo"
      produces:
      - "application/json"
      parameters:
      - name: "documentKey"
        in: "path"
        required: true
        type: "string"
      - name: "copyId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/TrackingDetailsResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/management-search:
    post:
      tags:
      - "Document Manager"
      summary: "Search for document, file or group"
      operationId: "multiSearch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Search"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "online"
        in: "query"
        required: false
        type: "string"
      - name: "status"
        in: "query"
        required: false
        type: "string"
      - name: "search"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/DocumentFileResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/override/{clientLayout}:
    post:
      tags:
      - "Document Manager"
      summary: "override"
      description: "List of File Keys."
      operationId: "fileOverride"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clientLayout"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/FileKeysResponse"
        400:
          description: "Status 400"
          schema:
            $ref: "#/definitions/ErrorResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/purge/document:
    post:
      tags:
      - "Document Manager"
      summary: "purge documents"
      description: "list of documentIds"
      operationId: "documentAction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/HoldDocumentPost"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/TransactionResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/purge/multilevel:
    post:
      tags:
      - "Document Manager"
      summary: "purge file or group"
      description: "file/multilevel representations."
      operationId: "documentAction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/HoldFilePost"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/TransactionResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/release/document:
    post:
      tags:
      - "Document Manager"
      summary: "release documents"
      operationId: "documentAction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ReleaseDocumentPost"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/TransactionResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/release/multilevel:
    post:
      tags:
      - "Document Manager"
      summary: "release files"
      operationId: "documentAction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ReleaseFilePost"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/TransactionResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/route/document:
    post:
      tags:
      - "Document Manager"
      summary: "route documents"
      description: ""
      operationId: "documentAction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/RouteDocumentPost"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/TransactionResponse"
      x-swagger-router-controller: "DocumentManager"
  /document-management/document/route/multilevel:
    post:
      tags:
      - "Document Manager"
      summary: "route multilevel"
      operationId: "documentAction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/RouteFilePost"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/TransactionResponse"
      x-swagger-router-controller: "DocumentManager"
  /error-management/error/{errId}:
    get:
      tags:
      - "Error Manager"
      summary: "Get error by id"
      operationId: "errGetById"
      produces:
      - "application/json"
      parameters:
      - name: "errId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/ErrorsDetailResponse"
      x-swagger-router-controller: "ErrorManager"
    put:
      tags:
      - "Error Manager"
      summary: "Put error status by id"
      operationId: "errPutById"
      consumes:
      - "application/json"
      parameters:
      - name: "errId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ErrorsDetailPut"
      responses:
        200:
          description: "Status 200"
      x-swagger-router-controller: "ErrorManager"
  /error-management/error/{errId}/info:
    get:
      tags:
      - "Error Manager"
      summary: "Get error info by id"
      operationId: "errGetDetailListById"
      produces:
      - "application/json"
      parameters:
      - name: "errId"
        in: "path"
        required: true
        type: "string"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "online"
        in: "query"
        required: false
        type: "string"
      - name: "status"
        in: "query"
        required: false
        type: "string"
      - name: "search"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/ErrorsDetailInfoListResponse"
      x-swagger-router-controller: "ErrorManager"
  /error-management/error/{errId}/status:
    get:
      tags:
      - "Error Manager"
      summary: "Get status of an error"
      description: "to get status of an error"
      operationId: "errGetStatus"
      produces:
      - "application/json"
      parameters:
      - name: "errId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/anonymousRepresentation6"
      x-swagger-router-controller: "ErrorManager"
  /error-management/errors:
    get:
      tags:
      - "Error Manager"
      summary: "Get all errors"
      operationId: "errGet"
      produces:
      - "application/json"
      parameters:
      - name: "sort"
        in: "query"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "online"
        in: "query"
        required: false
        type: "string"
      - name: "status"
        in: "query"
        required: false
        type: "string"
      - name: "search"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ErrorsResponse"
      x-swagger-router-controller: "ErrorManager"
  /error-management/errors/{manager}/{managerKey}:
    get:
      tags:
      - "Error Manager"
      summary: "get error id by document/file key"
      operationId: "getErrIdByKey"
      produces:
      - "application/json"
      parameters:
      - name: "manager"
        in: "path"
        required: true
        type: "string"
        x-example: "fileReceipts"
      - name: "managerKey"
        in: "path"
        description: "Integer or Integer+String"
        required: true
        type: "string"
        x-example: "70126789312054321CC"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/ErrorIdResponse"
      x-swagger-router-controller: "ErrorManager"
  /error-management/reprocess/:
    post:
      tags:
      - "Error Manager"
      summary: "Reprocess an error"
      operationId: "errPostProcess"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ErrorReprocess"
      responses:
        200:
          description: "Success"
      x-swagger-router-controller: "ErrorManager"
  /file-receipt-tracking/FileReceipts:
    get:
      tags:
      - "File Receipt Manager"
      description: "Returns file receipts data to the caller"
      operationId: "getFileReceipts"
      produces:
      - "application/json"
      parameters:
      - name: "sort"
        in: "query"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "online"
        in: "query"
        required: false
        type: "string"
      - name: "status"
        in: "query"
        required: false
        type: "string"
      - name: "search"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "FileReceiptManager"
  /file-receipt-tracking/FileReceipts/{key}:
    get:
      tags:
      - "File Receipt Manager"
      description: "Returns file receipts data to the caller"
      operationId: "key"
      produces:
      - "application/json"
      parameters:
      - name: "key"
        in: "path"
        description: "file key"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "FileReceiptManager"
  /file-receipt-tracking/FileReceipts/{key}/download/abf-formatted:
    get:
      tags:
      - "File Receipt Manager"
      description: "Returns file receipts data to the caller"
      operationId: "abf"
      produces:
      - "application/json"
      parameters:
      - name: "key"
        in: "path"
        description: "file key"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "FileReceiptManager"
  /file-receipt-tracking/FileReceipts/{key}/download/check-register:
    get:
      tags:
      - "File Receipt Manager"
      description: "Returns file receipts data to the caller"
      operationId: "check"
      produces:
      - "application/json"
      parameters:
      - name: "key"
        in: "path"
        description: "file key"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "FileReceiptManager"
  /file-receipt-tracking/FileReceipts/{key}/download/original:
    get:
      tags:
      - "File Receipt Manager"
      description: "Returns file receipts data to the caller"
      operationId: "original"
      produces:
      - "application/json"
      parameters:
      - name: "key"
        in: "path"
        description: "file key"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "FileReceiptManager"
  /file-receipt-tracking/FileReceipts/{key}/resend:
    get:
      tags:
      - "File Receipt Manager"
      description: "Returns file receipts data to the caller"
      operationId: "resend"
      produces:
      - "application/json"
      parameters:
      - name: "key"
        in: "path"
        description: "file key"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "FileReceiptManager"
  /group-rule/group:
    post:
      tags:
      - "Group Rules Manager"
      summary: "add a new EmployerGroup"
      operationId: "egPostAdd"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EmployerGroupPost"
      responses:
        200:
          description: "Status 200"
      x-swagger-router-controller: "GroupRulesManager"
    put:
      tags:
      - "Group Rules Manager"
      summary: "Modify Groups (Activate/Deactivate all)"
      description: "Used to activate/deactive a set of groups in one API call.  Could\
        \ be extended for other bulk uses in future."
      operationId: "egPutAll"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/EGPutStatus"
      responses:
        200:
          description: "Status 200"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/group/clientId/{clientID}:
    get:
      tags:
      - "Group Rules Manager"
      summary: "Get All Groups by a Client Layout"
      operationId: "getGroups"
      produces:
      - "application/json"
      parameters:
      - name: "clientID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EmployerGroupSingle"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/group/commitGroupRuleAssociation:
    post:
      tags:
      - "Group Rules Manager"
      summary: "Commit Rule Association"
      description: "Commit association"
      operationId: "updateRuleAssociation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/anonymousRepresentation21"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/group/getGroupRuleAssociation:
    post:
      tags:
      - "Group Rules Manager"
      summary: "Get Bulk Group Group Rule Associations"
      description: "Get All Group Group Rule Associations"
      operationId: "getGroupsAssociations"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/GroupAssociationsResponse"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/group/getGroupRuleAssociation/{groupId}:
    get:
      tags:
      - "Group Rules Manager"
      summary: "Get Group Group Rule Associations"
      description: "Get Group Group Rule Associations"
      operationId: "getGroupAssociations"
      produces:
      - "application/json"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/GroupAssociationsResponse"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/group/getGroups/ruleAssociations/{ruleId}:
    get:
      tags:
      - "Group Rules Manager"
      summary: "Get All Groups by a Client Layout"
      operationId: "getGroupsRuleAssociation"
      produces:
      - "application/json"
      parameters:
      - name: "ruleId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EmployerGroupSingle"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/group/groupRuleAssociation/{groupId}/{ruleId}:
    post:
      tags:
      - "Group Rules Manager"
      summary: "Create Rule Association"
      description: "Create association"
      operationId: "createRuleAssociation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        type: "string"
      - name: "ruleId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/anonymousRepresentation19"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/group/modifyGroupRuleAssociation:
    post:
      tags:
      - "Group Rules Manager"
      summary: "Update Rule Association"
      description: "Update association"
      operationId: "updateRuleAssociation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/anonymousRepresentation20"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/group/{groupId}:
    get:
      tags:
      - "Group Rules Manager"
      summary: "get single EmployerGroup"
      operationId: "egGetOne"
      produces:
      - "application/json"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/EmployerGroupSingle"
      x-swagger-router-controller: "GroupRulesManager"
    put:
      tags:
      - "Group Rules Manager"
      summary: "modify an EmployerGroup"
      operationId: "egPut"
      consumes:
      - "application/json"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/EmployerGroupSingle"
      responses:
        200:
          description: "Status 200"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/rules:
    get:
      tags:
      - "Group Rules Manager"
      operationId: "getRules"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
    post:
      tags:
      - "Group Rules Manager"
      operationId: "addRule"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/anonymousRepresentation17"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/rules/clone/{ruleID}/{status}:
    post:
      tags:
      - "Group Rules Manager"
      operationId: "copyRule"
      produces:
      - "application/json"
      parameters:
      - name: "ruleID"
        in: "path"
        required: true
        type: "string"
      - name: "status"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/rules/commit/multi:
    post:
      tags:
      - "Group Rules Manager"
      operationId: "commitRules"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/anonymousRepresentation12"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/rules/commit/{ruleID}:
    post:
      tags:
      - "Group Rules Manager"
      operationId: "commitRule"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "ruleID"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/anonymousRepresentation13"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/rules/getGroupAssociations/{ruleId}:
    get:
      tags:
      - "Group Rules Manager"
      summary: "Get all Group Association Data for a Rule"
      operationId: "getGroupAssociationsByRule"
      produces:
      - "application/json"
      parameters:
      - name: "ruleId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/RuleAssociationsResponse"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/rules/ruleType/{type}:
    get:
      tags:
      - "Group Rules Manager"
      operationId: "getRulesByType"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/rules/ruleTypes/{clientLayout}:
    get:
      tags:
      - "Group Rules Manager"
      summary: "Get All RuleTypes for a given ClientLayout"
      operationId: "getRuleTypesByClientLayout"
      produces:
      - "application/json"
      parameters:
      - name: "clientLayout"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/anonymousRepresentation18"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/rules/{ruleID}:
    get:
      tags:
      - "Group Rules Manager"
      operationId: "getRule"
      produces:
      - "application/json"
      parameters:
      - name: "ruleID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
    post:
      tags:
      - "Group Rules Manager"
      operationId: "createTestRule"
      produces:
      - "application/json"
      parameters:
      - name: "ruleID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
    put:
      tags:
      - "Group Rules Manager"
      operationId: "editRule"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "ruleID"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/anonymousRepresentation16"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/rules/{ruleID}/details:
    post:
      tags:
      - "Group Rules Manager"
      operationId: "addRuleDetails"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "ruleID"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/anonymousRepresentation15"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
    put:
      tags:
      - "Group Rules Manager"
      operationId: "modifyDetailRecord"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "ruleID"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/anonymousRepresentation14"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
    delete:
      tags:
      - "Group Rules Manager"
      operationId: "deleteDetailRecord"
      produces:
      - "application/json"
      parameters:
      - name: "ruleID"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
  /group-rule/rules/{ruleID}/{status}/details:
    get:
      tags:
      - "Group Rules Manager"
      operationId: "getDetailRecords"
      produces:
      - "application/json"
      parameters:
      - name: "ruleID"
        in: "path"
        required: true
        type: "string"
      - name: "status"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "GroupRulesManager"
  /message/login-messages/{clientLayout}/{userType}:
    get:
      tags:
      - "Messages"
      summary: "Get all list of messages"
      operationId: "getMessages"
      produces:
      - "application/json"
      parameters:
      - name: "clientLayout"
        in: "path"
        required: true
        type: "string"
      - name: "userType"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/MessageResponse"
      x-swagger-router-controller: "Messages"
  /on-hold-report/reports/onholdreport:
    post:
      tags:
      - "Report Manager"
      operationId: "onHoldReport"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/OnHoldReportPost"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "ReportManager"
  /report-manager/reports/userreport:
    post:
      tags:
      - "Report Manager"
      summary: "Get the user report"
      operationId: "userReport"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/anonymousRepresentation7"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/UserReportResponse"
      x-swagger-router-controller: "ReportManager"
  /reporting/client-image-report:
    get:
      tags:
      - "Report Manager"
      operationId: "clientImageReport"
      produces:
      - "application/pdf"
      parameters:
      - name: "env"
        in: "query"
        description: "test/production"
        required: true
        type: "string"
      - name: "clientId"
        in: "query"
        description: "0002"
        required: true
        type: "string"
      - name: "layoutId"
        in: "query"
        description: "028"
        required: false
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "ReportManager"
  /reporting/client-information-report:
    get:
      tags:
      - "Report Manager"
      summary: "Get client information report"
      operationId: "clientInfoReport"
      produces:
      - "application/json"
      parameters:
      - name: "context"
        in: "query"
        required: true
        type: "string"
      - name: "layoutId"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "ReportManager"
  /reporting/on-hold-report: {}
  /security-context/security/context:
    get:
      tags:
      - "Auth"
      summary: "Get profile/security context for a user."
      operationId: "getSecurityContext"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        x-example: "Bearer access_token retrieved from auth endpoint."
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/ContextResponse"
      x-swagger-router-controller: "Auth"
  /security-manager/dataSources:
    get:
      tags:
      - "Security Manager"
      summary: "Get all data sources"
      description: "to get all data sources"
      operationId: "dataSources"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/dataSource"
      x-swagger-router-controller: "SecurityManager"
  /security-manager/permissions:
    get:
      tags:
      - "Security Manager"
      operationId: "permissions"
      produces:
      - "application/json"
      parameters:
      - name: "order"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "SecurityManager"
  /security-manager/roles:
    get:
      tags:
      - "Security Manager"
      summary: "Get all roles"
      description: "to get all roles"
      operationId: "roles"
      produces:
      - "application/json"
      parameters:
      - name: "sort"
        in: "query"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "online"
        in: "query"
        required: false
        type: "string"
      - name: "status"
        in: "query"
        required: false
        type: "string"
      - name: "search"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/role"
      x-swagger-router-controller: "SecurityManager"
    post:
      tags:
      - "Security Manager"
      summary: "add roles"
      operationId: "addRole"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/anonymousRepresentation8"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "SecurityManager"
    delete:
      tags:
      - "Security Manager"
      summary: "Delete Roles"
      operationId: "delRole"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "SecurityManager"
  /security-manager/roles/{roleId}:
    get:
      tags:
      - "Security Manager"
      summary: "Get single role"
      description: "to get single role"
      operationId: "roleById"
      produces:
      - "application/json"
      parameters:
      - name: "roleId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "SecurityManager"
    put:
      tags:
      - "Security Manager"
      summary: "modify a role"
      operationId: "putRole"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "roleId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/anonymousRepresentation10"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "SecurityManager"
  /security-manager/users:
    get:
      tags:
      - "Security Manager"
      summary: "Get all users"
      description: "to get all users"
      operationId: "users"
      produces:
      - "application/json"
      parameters:
      - name: "sort"
        in: "query"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "online"
        in: "query"
        required: false
        type: "string"
      - name: "status"
        in: "query"
        required: false
        type: "string"
      - name: "search"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "SecurityManager"
    post:
      tags:
      - "Security Manager"
      summary: "add a user"
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserProperty"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "SecurityManager"
  /security-manager/users/ucws/{uid}:
    get:
      tags:
      - "Security Manager"
      summary: "Get a List of UCW/Role Mapping for a User"
      description: "Get a List of UCW/Role Mapping for a User"
      operationId: "getContextRoles"
      produces:
      - "application/json"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ucwAssociation"
      x-swagger-router-controller: "SecurityManager"
    put:
      tags:
      - "Security Manager"
      summary: "Assign user to a context"
      operationId: "assignRoles"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/anonymousRepresentation9"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "SecurityManager"
  /security-manager/users/{uid}:
    get:
      tags:
      - "Security Manager"
      description: "to get a specific user data"
      operationId: "user"
      produces:
      - "application/json"
      parameters:
      - name: "uid"
        in: "path"
        description: "user id"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "SecurityManager"
    put:
      tags:
      - "Security Manager"
      summary: "modify a user"
      operationId: "modifyUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "uid"
        in: "path"
        description: "user id"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserProperty"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "SecurityManager"
  /security-manager/users/{uid}/resetPwd:
    get:
      tags:
      - "Security Manager"
      description: "to reset the user password"
      operationId: "resetPwd"
      produces:
      - "application/json"
      parameters:
      - name: "uid"
        in: "path"
        description: "user id"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "SecurityManager"
  /security-manager/users/{uid}/terminate:
    get:
      tags:
      - "Security Manager"
      summary: "Terminate the user session"
      operationId: "termUser"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
      x-swagger-router-controller: "SecurityManager"
  /swagger: {}
  /system-values-retrieval/system/all/:
    get:
      tags:
      - "System Values"
      summary: "Get All Static Data Values"
      operationId: "getSysValues"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/SystemValuesResponse"
      x-swagger-router-controller: "SystemValues"
  /testfile-manager/download/{type}/{id}:
    get:
      tags:
      - "Test File Manager"
      summary: "Download output file"
      description: "Download test file output"
      operationId: "downloadFile"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        description: "'pdf' or 'xml'"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "'pdfId' or 'xmlId'"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/StandardResponse"
      x-swagger-router-controller: "TestFileManager"
  /testfile-manager/files:
    get:
      tags:
      - "Test File Manager"
      summary: "Get all test files"
      description: " "
      operationId: "getTestFiles"
      produces:
      - "application/json"
      parameters:
      - name: "sort"
        in: "query"
        required: false
        type: "string"
      - name: "order"
        in: "query"
        required: false
        type: "string"
      - name: "offset"
        in: "query"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "online"
        in: "query"
        required: false
        type: "string"
      - name: "status"
        in: "query"
        required: false
        type: "string"
      - name: "search"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: ""
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TestFile"
      x-swagger-router-controller: "TestFileManager"
    post:
      tags:
      - "Test File Manager"
      summary: "Add a test file"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "file"
        in: "formData"
        description: "The uploaded file data"
        required: false
        type: "file"
      - name: "email"
        in: "formData"
        description: "email"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/TestFile"
      x-swagger-router-controller: "TestFileManager"
  /testfile-manager/files/{fileKey}:
    get:
      tags:
      - "Test File Manager"
      summary: "Get the detail info by a file key"
      description: ""
      operationId: "getTestFileByKey"
      produces:
      - "application/json"
      parameters:
      - name: "fileKey"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/TestFile"
      x-swagger-router-controller: "TestFileManager"
    put:
      tags:
      - "Test File Manager"
      summary: "Update the access level"
      operationId: "updateAccessLevel"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "fileKey"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/anonymousRepresentation11"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/TestFile"
      x-swagger-router-controller: "TestFileManager"
  /testfile-manager/files/{fileKey}/resubmit:
    get:
      tags:
      - "Test File Manager"
      summary: "To resubmit by a file key"
      description: ""
      operationId: "resubmit"
      produces:
      - "application/json"
      parameters:
      - name: "fileKey"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: ""
          schema:
            $ref: "#/definitions/TestFile"
      x-swagger-router-controller: "TestFileManager"
definitions:
  anonymousRepresentation:
    type: "object"
  anonymousRepresentation2:
    type: "object"
    required:
    - "permissionDesc"
    - "permissionId"
    - "permissionName"
    properties:
      permissionId:
        type: "string"
      permissionName:
        type: "string"
      permissionDesc:
        type: "string"
  anonymousRepresentation3:
    type: "object"
    required:
    - "reprocess"
    - "ruleTypeDesc"
    - "ruleTypeId"
    - "value"
    properties:
      ruleTypeId:
        type: "string"
      ruleTypeDesc:
        type: "string"
      value:
        type: "string"
      reprocess:
        type: "string"
  anonymousRepresentation4:
    type: "object"
    required:
    - "reprocess"
    - "ruleTypeDesc"
    - "ruleTypeId"
    - "value"
    properties:
      ruleTypeId:
        type: "string"
      ruleTypeDesc:
        type: "string"
      value:
        type: "string"
      reprocess:
        type: "string"
  anonymousRepresentation5:
    type: "object"
    required:
    - "newPassword"
    - "oldPassword"
    properties:
      oldPassword:
        type: "string"
      newPassword:
        type: "string"
      hint:
        type: "string"
  anonymousRepresentation6:
    type: "object"
    required:
    - "statusCode"
    - "statusDesc"
    properties:
      statusCode:
        type: "string"
        description: "12/B0/...etc"
      statusDesc:
        type: "string"
        description: "Auto Hold....etc"
  anonymousRepresentation7:
    type: "object"
    required:
    - "cwID"
    - "reportType"
    - "sortBy"
    - "sortOrder"
    properties:
      reportType:
        type: "string"
        description: "View On Screen/Download Microsoft Excel"
      cwID:
        type: "array"
        items:
          type: "number"
      sortOrder:
        type: "string"
        description: "Ascending/Descending"
      sortBy:
        type: "string"
        description: "User ID/User Name/Last Logged In"
  anonymousRepresentation8:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/postRole"
  anonymousRepresentation9:
    type: "object"
    required:
    - "add"
    - "deleteUcwRoles"
    - "deleteUcws"
    properties:
      add:
        type: "array"
        items:
          $ref: "#/definitions/ucwAddRole"
      deleteUcwRoles:
        type: "array"
        items:
          $ref: "#/definitions/ucwDeleteRole"
      deleteUcws:
        type: "array"
        items:
          $ref: "#/definitions/ucwDeleteRole"
  anonymousRepresentation10:
    type: "object"
  anonymousRepresentation11:
    type: "object"
    properties:
      internal:
        type: "boolean"
        default: false
  anonymousRepresentation12:
    type: "object"
    properties:
      fields:
        type: "array"
        items:
          $ref: "#/definitions/anonymousRepresentation12_Fields"
  anonymousRepresentation13:
    type: "object"
    properties:
      ruleVersion:
        type: "string"
  anonymousRepresentation14:
    type: "object"
    properties:
      detailIDs:
        type: "string"
  anonymousRepresentation15:
    type: "object"
    properties:
      claimType:
        type: "string"
      recipientType:
        type: "string"
      documentType:
        type: "string"
      copyNumber:
        type: "string"
      taxIdSSN:
        type: "string"
      ssn:
        type: "string"
      insuredEligibility:
        type: "string"
      copyFlag:
        type: "string"
      abfFormID:
        type: "string"
      recipientStatus:
        type: "string"
      ppoCount:
        type: "string"
      messageCode:
        type: "string"
      hppID:
        type: "string"
      checkAmount:
        type: "string"
      insertCode:
        type: "string"
      state:
        type: "string"
      customRoute:
        type: "string"
      plcntnType:
        type: "string"
      languageCode:
        type: "string"
      jsonPayload:
        type: "string"
      createdByID:
        type: "string"
      createdDate:
        type: "number"
        format: "double"
      modifiedByID:
        type: "string"
      modifiedDate:
        type: "number"
        format: "double"
  anonymousRepresentation16:
    type: "object"
    properties:
      isActive:
        type: "string"
      ruleStatus:
        type: "string"
      ruleDesc:
        type: "string"
  anonymousRepresentation17:
    type: "object"
    properties:
      ruleDesc:
        type: "string"
      ruleTypeID:
        type: "string"
      clientID:
        type: "number"
        format: "double"
  anonymousRepresentation18:
    type: "object"
  anonymousRepresentation19:
    type: "object"
    required:
    - "ruleStatus"
    properties:
      ruleStatus:
        type: "string"
    description: "pass the ruleStatus"
  anonymousRepresentation20:
    type: "object"
    required:
    - "addOrUpdateAssociation"
    - "deleteAssociation"
    properties:
      addOrUpdateAssociation:
        type: "array"
        items:
          $ref: "#/definitions/associationDetail"
      deleteAssociation:
        type: "array"
        items:
          $ref: "#/definitions/associationDetail"
  anonymousRepresentation21:
    type: "object"
    required:
    - "commitGroupRuleAssociation"
    properties:
      commitGroupRuleAssociation:
        type: "array"
        items:
          $ref: "#/definitions/associationDetail"
  AuthTokenResponse:
    type: "object"
    required:
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          $ref: "#/definitions/AuthTokenResponse_Messages"
      data:
        type: "array"
        items:
          $ref: "#/definitions/Token"
  ContextProfileData:
    type: "object"
    required:
    - "profile"
    properties:
      profile:
        $ref: "#/definitions/ContextProfileData_Profile"
      ucws:
        type: "array"
        items:
          $ref: "#/definitions/ContextProfileData_Ucws"
      rolePermissions:
        type: "array"
        items:
          $ref: "#/definitions/ContextProfileData_RolePermissions"
  LogoutResponse:
    type: "object"
    required:
    - "data"
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          $ref: "#/definitions/LogoutResponse_Messages"
      data:
        type: "array"
        items:
          type: "string"
  ContextResponse:
    type: "object"
    required:
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          $ref: "#/definitions/ContextResponse_Messages"
      data:
        type: "array"
        items:
          $ref: "#/definitions/ContextProfileData"
  Token:
    type: "object"
    required:
    - "access_token"
    - "expires_in"
    - "jti"
    - "scope"
    - "token_type"
    properties:
      access_token:
        type: "string"
        description: "Unique Access Token"
      token_type:
        type: "string"
        description: "bearer"
      expires_in:
        type: "string"
        description: "time for token to expire"
      scope:
        type: "string"
        description: "read"
      jti:
        type: "string"
  AddressResponse:
    type: "object"
    required:
    - "data"
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        type: "array"
        description: "Will only be one."
        items:
          $ref: "#/definitions/Address"
  Address:
    type: "object"
    properties:
      addressId:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      address1:
        type: "string"
      address2:
        type: "string"
      zip:
        type: "string"
      state:
        type: "string"
      city:
        type: "string"
      attention:
        type: "string"
      deliveryType:
        type: "string"
      sortOrder:
        type: "string"
      addressType:
        type: "string"
        description: "Determines if it is a delivery address or return address."
      description:
        type: "string"
      modifiedDate:
        type: "string"
      addressStatus:
        type: "string"
  AddressesList:
    type: "object"
    required:
    - "addressId"
    properties:
      addressId:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      address1:
        type: "string"
      address2:
        type: "string"
      zip:
        type: "string"
      state:
        type: "string"
      city:
        type: "string"
      attention:
        type: "string"
      deliveryType:
        type: "string"
      sortOrder:
        type: "string"
      addressType:
        type: "string"
        description: "Determines if it is a delivery address or return address."
      description:
        type: "string"
      modifiedDate:
        type: "string"
      addressStatus:
        type: "string"
  AddressesResponse:
    type: "object"
    required:
    - "data"
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        type: "array"
        description: "List of address."
        items:
          $ref: "#/definitions/AddressesList"
  AddressPostProperty:
    type: "object"
    properties:
      Desc:
        type: "string"
      City:
        type: "string"
      State:
        type: "string"
      Zip:
        type: "string"
  AddressPutProperty:
    type: "object"
    properties:
      Desc:
        type: "string"
      City:
        type: "string"
      State:
        type: "string"
      Zip:
        type: "string"
  TranslationsGetOne:
    type: "object"
    required:
    - "normalizedTranslationType"
    - "translationType"
    - "translationTypeDesc"
    - "translationTypeId"
    - "translationTypeStatus"
    properties:
      translationTypeId:
        type: "integer"
        format: "int64"
      translationType:
        type: "string"
      normalizedTranslationType:
        type: "string"
      translationTypeDesc:
        type: "string"
      translationTypeStatus:
        type: "string"
  TranslationPostPut:
    type: "object"
    required:
    - "normalizedTranslationType"
    - "translationType"
    - "translationTypeDesc"
    - "translationTypeStatus"
    properties:
      translationType:
        type: "string"
      normalizedTranslationType:
        type: "string"
      translationTypeDesc:
        type: "string"
      translationTypeStatus:
        type: "string"
  TranslationTypeOptions:
    type: "object"
    required:
    - "normalizedTypeCode"
    - "normalizedTypeDesc"
    - "normalizedTypeId"
    properties:
      normalizedTypeId:
        type: "integer"
        format: "int64"
      normalizedTypeCode:
        type: "string"
        description: "00/AB"
      normalizedTypeDesc:
        type: "string"
  TranslationClientTypeOptions:
    type: "object"
    required:
    - "clientTypeCode"
    - "clientTypeId"
    properties:
      clientTypeId:
        type: "integer"
        format: "int64"
      clientTypeCode:
        type: "string"
        description: "001"
  AddressExclusion:
    type: "object"
    required:
    - "addr1"
    - "addr2"
    - "city"
    - "desc"
    - "name"
    - "state"
    - "targets"
    - "zip"
    properties:
      id:
        type: "string"
      desc:
        type: "string"
      name:
        type: "string"
      addr1:
        type: "string"
      addr2:
        type: "string"
      city:
        type: "string"
      state:
        type: "string"
      zip:
        type: "string"
      country:
        type: "string"
      targets:
        type: "array"
        description: "['ACE', 'TWE', 'GSA', 'OIG']"
        items:
          type: "string"
  getClientDropdowns:
    type: "object"
    required:
    - "keyId"
    - "options"
    properties:
      keyId:
        type: "string"
      options:
        type: "array"
        items:
          $ref: "#/definitions/getClientDropdowns_Options"
  ClientSaved:
    type: "object"
    required:
    - "keyId"
    - "value"
    properties:
      keyId:
        type: "string"
      value:
        type: "string"
  TrackingDetailsResponse:
    type: "object"
    required:
    - "data"
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        type: "array"
        items:
          $ref: "#/definitions/TrackingDetails"
  TrackingDetails:
    type: "object"
    properties:
      type:
        type: "string"
        description: "Could be data processing / doc management"
      facility:
        type: "string"
      id:
        type: "string"
      description:
        type: "string"
      datetime:
        type: "string"
  CopyInfoResponse:
    type: "object"
    required:
    - "data"
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        type: "array"
        items:
          $ref: "#/definitions/CopyInformation"
  CopyInformationDetails:
    type: "object"
    properties:
      stock:
        type: "string"
      jobId:
        type: "integer"
        format: "int32"
      envelope:
        type: "integer"
        format: "int32"
      page:
        type: "integer"
        format: "int32"
      facility:
        type: "string"
      mailDate:
        type: "string"
      deliveryType:
        type: "string"
      eEOBMail:
        type: "string"
  CopyInformation:
    type: "object"
    required:
    - "copyId"
    - "copyNumber"
    properties:
      copyNumber:
        type: "string"
      details:
        type: "array"
        items:
          $ref: "#/definitions/CopyInformationDetails"
      copyId:
        type: "string"
  DeliveryInfoResponse:
    type: "object"
    required:
    - "data"
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        type: "array"
        items:
          $ref: "#/definitions/DeliveryInfoHistory"
  DeliveryInfoHistory:
    type: "object"
    properties:
      current:
        $ref: "#/definitions/Address"
      previous:
        type: "array"
        items:
          $ref: "#/definitions/Address"
  TransactionHistory:
    type: "object"
    required:
    - "lastHoldDate"
    - "lastHoldId"
    - "lastHoldUser"
    properties:
      lastHoldId:
        type: "integer"
        format: "int32"
        description: "Last hold transaction ID."
      lastHoldUser:
        type: "string"
        description: "User name"
      lastHoldDate:
        type: "string"
        description: "Date time"
    description: "Response containing previous hold transaction information"
  TransactionResponse:
    type: "object"
    required:
    - "data"
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        type: "number"
        format: "double"
        description: "Will only be one."
  TransactionDetails:
    type: "object"
    properties:
      transactionId:
        type: "string"
  HistorySearch:
    type: "object"
    required:
    - "action"
    - "clientLayout"
    - "level"
    properties:
      action:
        type: "string"
        description: "Release, purge, route, hold"
      level:
        type: "string"
        description: "Document, Group, File, Auto"
      startDate:
        type: "string"
      endDate:
        type: "string"
      fileOrDocKey:
        type: "string"
        description: "This will send either a filekey or doc key and the history will\
          \ have to search based on the level selected."
      collapseClaims:
        type: "string"
      clientLayout:
        type: "string"
    description: "Search paramaters for history query."
  RouteDocumentPost:
    type: "object"
    required:
    - "clientLayout"
    - "deliveryInfo"
    - "transactionDetails"
    properties:
      transactionDetails:
        type: "array"
        description: "list of documentIds to release"
        items:
          $ref: "#/definitions/DocumentPost"
      deliveryInfo:
        $ref: "#/definitions/DeliveryInfo"
      level:
        type: "string"
      clientLayout:
        type: "string"
  ReleaseFilePost:
    type: "object"
    required:
    - "level"
    - "releaseType"
    - "transactionDetails"
    properties:
      transactionDetails:
        type: "array"
        description: "list of fileKeys to release"
        items:
          $ref: "#/definitions/FilePost"
      releaseType:
        type: "string"
      level:
        type: "string"
        description: "group or file"
  RouteFilePost:
    type: "object"
    required:
    - "deliveryInfo"
    - "level"
    - "transactionDetails"
    properties:
      transactionDetails:
        type: "array"
        description: "list of fileKeys to release"
        items:
          $ref: "#/definitions/FilePost"
      deliveryInfo:
        $ref: "#/definitions/DeliveryInfo"
      level:
        type: "string"
        description: "group or file"
  ReleaseDocumentPost:
    type: "object"
    required:
    - "clientLayout"
    - "releaseType"
    - "transactionDetails"
    properties:
      transactionDetails:
        type: "array"
        description: "list of documents to release"
        items:
          $ref: "#/definitions/DocumentPost"
      releaseType:
        type: "string"
      level:
        type: "string"
      clientLayout:
        type: "string"
  HoldFilePost:
    type: "object"
    required:
    - "level"
    - "transactionDetails"
    properties:
      transactionDetails:
        type: "array"
        description: "list of fileKeys to release"
        items:
          $ref: "#/definitions/FilePost"
      level:
        type: "string"
        description: "group or file"
  HoldDocumentPost:
    type: "object"
    required:
    - "clientLayout"
    - "transactionDetails"
    properties:
      transactionDetails:
        type: "array"
        description: "list of documents to release"
        items:
          $ref: "#/definitions/DocumentPost"
      level:
        type: "string"
      clientLayout:
        type: "string"
  DeliveryInfo:
    type: "object"
    required:
    - "deliveryAddressId"
    - "deliveryType"
    - "releaseItemsOnHold"
    properties:
      deliveryAddressId:
        type: "string"
        description: "If original address, discriminator will be: \"original\"\nIf\
          \ one time address, discriminator will be: \"one-time\""
      deliveryType:
        type: "string"
      releaseItemsOnHold:
        type: "string"
        description: "0 - Do not release\n1 - First Available\n2 - Scheduled Release"
      deliveryAddress:
        $ref: "#/definitions/Address"
  DocumentFileResponse:
    type: "object"
    required:
    - "data"
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        type: "array"
        items:
          $ref: "#/definitions/File"
  Group:
    type: "object"
    required:
    - "groupId"
    - "groupName"
    properties:
      groupId:
        type: "string"
      groupName:
        type: "string"
  File:
    type: "object"
    properties:
      fileKey:
        type: "string"
        description: "Required if at file and group level"
      importDate:
        type: "string"
      originalFileName:
        type: "string"
      documentType:
        type: "string"
      claimType:
        type: "string"
      recipientType:
        type: "string"
      status:
        type: "string"
      transactionId:
        type: "string"
        description: "If it was managed, it is a required field. Transaction ID can\
          \ be \"0000234567\". So we have to save it as string"
      transactionUser:
        type: "string"
        description: "If it was managed, it is a required field."
      transactionDate:
        type: "string"
        description: "If it was managed, it is a required field."
      groupId:
        type: "string"
        description: "Required at group level"
      groupName:
        type: "string"
        description: "Required at group level"
      documentKey:
        type: "string"
        description: "Required if at document level"
      claimNumber:
        type: "string"
        description: "Required at document level"
      checkNumber:
        type: "string"
        description: "Required at document level"
      checkAmount:
        type: "string"
        description: "Float value"
  Search:
    type: "object"
    required:
    - "action"
    - "level"
    properties:
      action:
        type: "string"
        description: "hold, release, purge, route, any (for document search screen)"
      level:
        type: "string"
        description: "document, file, group"
      claimNumber:
        type: "string"
      checkNumber:
        type: "string"
      ssn:
        type: "string"
      employerGroups:
        type: "array"
        items:
          type: "string"
      fileKeys:
        type: "array"
        items:
          type: "string"
      claimType:
        type: "array"
        items:
          type: "string"
      recipientType:
        type: "array"
        items:
          type: "string"
      documentType:
        type: "array"
        items:
          type: "string"
  FilePost:
    type: "object"
    required:
    - "fileKey"
    properties:
      fileKey:
        type: "string"
      group:
        description: "Required in case of group level"
        $ref: "#/definitions/FilePost_Group"
  DocumentPost:
    type: "object"
    required:
    - "documentKey"
    properties:
      documentKey:
        type: "string"
  Documents:
    type: "object"
    required:
    - "documentKey"
    properties:
      documentKey:
        type: "string"
      claimNumber:
        type: "array"
        items:
          type: "string"
      checkNumber:
        type: "string"
      checkAmount:
        type: "string"
      status:
        type: "string"
      documentType:
        type: "string"
      recipientType:
        type: "string"
      claimType:
        type: "string"
      transactionId:
        type: "string"
        description: "If it was managed, it is a required field."
      transactionUser:
        type: "string"
        description: "If it was managed, it is a required field."
      transactionDate:
        type: "string"
        description: "If it was managed, it is a required field."
      copyNumber:
        type: "array"
        items:
          type: "string"
      paymentIdentifier:
        type: "string"
      trackingId:
        type: "string"
        description: "Would this be included in the response and if so, what would\
          \ it be for?  USPS, etc?"
      importDate:
        type: "string"
  FileKeysResponse:
    type: "object"
    required:
    - "data"
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        type: "array"
        items:
          type: "string"
    description: "Get File Keys response"
  DeliveryInfoMultiLevelResponse:
    type: "object"
    required:
    - "data"
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        $ref: "#/definitions/Address"
  ErrorsDetailInfoListResponse:
    type: "object"
    required:
    - "data"
    properties:
      total:
        type: "integer"
        format: "int32"
      offset:
        type: "integer"
        format: "int32"
      limit:
        type: "integer"
        format: "int32"
      data:
        type: "array"
        items:
          $ref: "#/definitions/ErrorsDetailInfoListResponse_Data"
  ErrorsDetailInfoDetailResponse:
    type: "object"
    required:
    - "data"
    properties:
      data:
        $ref: "#/definitions/ErrorsDetailInfoDetailResponse_Data"
  ErrorsDetailPut:
    type: "object"
    required:
    - "errStatus"
    properties:
      errStatus:
        type: "string"
        description: "new/processing/unknown/resolved"
  ErrorsDetailResponse:
    type: "object"
    required:
    - "errDesc"
    - "errId"
    - "errStatus"
    - "errType"
    - "severity"
    - "sysType"
    properties:
      errId:
        type: "integer"
        format: "int32"
      errType:
        type: "string"
      sysType:
        type: "string"
        description: "test/live"
      errStatus:
        type: "string"
        description: "new/processing/unknown/resolved"
      severity:
        type: "string"
        description: "information/investigate/severe/critical"
      errDesc:
        type: "string"
  ErrorsResponse:
    type: "object"
    required:
    - "errCount"
    - "errId"
    - "errStatus"
    - "errType"
    - "severity"
    - "sysType"
    properties:
      errId:
        type: "integer"
        format: "int32"
      errType:
        type: "string"
      sysType:
        type: "string"
        description: "test/live"
      errStatus:
        type: "string"
        description: "new/processing/unknown/resolved"
      severity:
        type: "string"
        description: "information/investigate/critical/severe"
      errCount:
        type: "integer"
        format: "int32"
  ErrorReprocess:
    type: "object"
    required:
    - "errId"
    - "statusCode"
    properties:
      errId:
        type: "integer"
        format: "int64"
      statusCode:
        type: "string"
        description: "12/B0"
  ErrorIdResponse:
    type: "object"
    required:
    - "errId"
    properties:
      errId:
        type: "string"
        description: "12001"
  OnHoldReportPost:
    type: "object"
    required:
    - "clientLayout"
    - "days"
    - "email"
    properties:
      email:
        type: "string"
      days:
        type: "string"
      clientLayout:
        type: "string"
  UserReportResponse:
    type: "object"
    required:
    - "data"
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "integer"
        format: "int32"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        type: "array"
        items:
          $ref: "#/definitions/userReportObj"
  userReportObj:
    type: "object"
    required:
    - "clientLayout"
    - "email"
    - "firstName"
    - "id"
    - "isActive"
    properties:
      webGroupId:
        type: "string"
      id:
        type: "string"
        description: "user id"
      firstName:
        type: "string"
      isActive:
        type: "string"
        description: "Y/N"
      clientLayout:
        type: "string"
      email:
        type: "string"
      lastLogin:
        type: "number"
        format: "double"
      passwordExpire:
        type: "number"
        format: "double"
      roleNames:
        type: "string"
      rolesDecription:
        type: "string"
  roleSimple:
    type: "object"
    required:
    - "roleDesc"
    - "roleId"
    - "roleName"
    - "roleStatus"
    properties:
      roleId:
        type: "integer"
        format: "int32"
      roleName:
        type: "string"
      roleDesc:
        type: "string"
      roleStatus:
        type: "string"
        description: "Y or N"
  ucwAssociation:
    type: "object"
    required:
    - "clientLayoutId"
    - "clientLayoutName"
    - "cwId"
    - "roleIds"
    - "ucwId"
    - "webGroupId"
    - "webGroupName"
    properties:
      clientLayoutId:
        type: "string"
      clientLayoutName:
        type: "string"
      webGroupId:
        type: "string"
      webGroupName:
        type: "string"
      ucwId:
        type: "number"
        format: "double"
      roleIds:
        type: "array"
        items:
          type: "number"
          format: "double"
      cwId:
        type: "number"
        format: "double"
  UcwResponse:
    type: "object"
    required:
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "integer"
        format: "int32"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        $ref: "#/definitions/ucwAssociation"
  UserProperty:
    type: "object"
    properties:
      uid:
        type: "string"
      name:
        type: "string"
      lastLogon:
        type: "number"
        format: "double"
      lastActivity:
        type: "number"
        format: "double"
      company:
        type: "string"
      title:
        type: "string"
      email:
        type: "string"
      birthday:
        type: "string"
      phone:
        type: "string"
      ext:
        type: "string"
      fax:
        type: "string"
      status:
        type: "string"
      pwdExp:
        type: "string"
      pwdHint:
        type: "string"
      roleId:
        type: "string"
      dataSrcId:
        type: "string"
      online:
        type: "boolean"
        default: false
      userType:
        type: "string"
      entries:
        type: "array"
        items:
          $ref: "#/definitions/UserProperty_Entries"
  role:
    type: "object"
    required:
    - "desc"
    - "id"
    - "name"
    - "permissions"
    - "status"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      desc:
        type: "string"
      status:
        type: "string"
      permissions:
        type: "array"
        items:
          $ref: "#/definitions/role_Permissions"
  ucwDeleteRole:
    type: "object"
    required:
    - "roleIds"
    - "ucwId"
    properties:
      ucwId:
        type: "integer"
        format: "int32"
        description: "ucwId"
      roleIds:
        type: "array"
        description: "Array of role Ids"
        items:
          type: "integer"
          format: "int32"
      cwId:
        type: "number"
        format: "double"
        description: "cwId"
  dataSource:
    type: "object"
    required:
    - "def"
    - "desc"
    - "id"
    - "status"
    properties:
      id:
        type: "string"
      def:
        type: "string"
      desc:
        type: "string"
      status:
        type: "string"
  user:
    type: "object"
    required:
    - "email"
    - "firstName"
    - "lastActivity"
    - "lastLogon"
    - "lastName"
    - "pwdExp"
    - "status"
    - "uid"
    properties:
      uid:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      lastLogon:
        type: "integer"
        format: "int32"
      lastActivity:
        type: "integer"
        format: "int32"
      company:
        type: "string"
      title:
        type: "string"
      email:
        type: "string"
      birthday:
        type: "string"
      phone:
        type: "string"
      ext:
        type: "string"
      fax:
        type: "string"
      status:
        type: "boolean"
        description: "Active / Inactive"
        default: false
      pwdExp:
        type: "integer"
        format: "int32"
        description: "password expires"
      pwdHint:
        type: "string"
        description: "password reminder"
  postRole:
    type: "object"
    required:
    - "permissions"
    - "roleDesc"
    - "roleName"
    - "roleStatus"
    - "roleType"
    properties:
      roleName:
        type: "string"
      roleDesc:
        type: "string"
      roleType:
        type: "string"
      roleStatus:
        type: "string"
      permissions:
        type: "array"
        items:
          $ref: "#/definitions/anonymousRepresentation2"
  ucwAddRole:
    type: "object"
    required:
    - "cwId"
    - "roleIds"
    properties:
      cwId:
        type: "number"
        format: "double"
        description: "cwId"
      roleIds:
        type: "array"
        description: "Array of role Ids"
        items:
          type: "integer"
          format: "int32"
      ucwId:
        type: "number"
        format: "double"
        description: "Will be a null if the ucw does not exist."
    description: "Add or Modify roles"
  SharedDocumentDeleteProperty:
    type: "object"
  TestFileSubmitPost:
    type: "object"
    properties:
      file:
        type: "string"
      keys:
        type: "array"
        items:
          type: "string"
      releaseOnly:
        type: "string"
      email:
        type: "string"
      numOfDoc:
        type: "string"
      groups:
        type: "array"
        items:
          type: "string"
      docTypes:
        type: "array"
        items:
          type: "string"
    description: "it's a form post enctype='multipart/form-data'"
  TestFileOutput:
    type: "object"
    properties:
      jobNum:
        type: "string"
      desc:
        type: "string"
      pdfs:
        type: "array"
        items:
          $ref: "#/definitions/TestFileOutput_Pdfs"
  TestFile:
    type: "object"
    required:
    - "testId"
    properties:
      testId:
        type: "string"
      submitDate:
        type: "integer"
        format: "int32"
      clientLayout:
        type: "string"
      completeDate:
        type: "integer"
        format: "int32"
      submitter:
        type: "string"
      originalName:
        type: "string"
      status:
        type: "string"
      access:
        type: "string"
      hardOutput:
        type: "string"
        description: "\"0\" or \"1\""
      email:
        type: "string"
      documentLimit:
        type: "integer"
        format: "int32"
        description: "0: stands for \"No Limit\""
      documentTypes:
        type: "array"
        description: "was docTypes 3/28/2017"
        items:
          type: "string"
      employerGroups:
        type: "array"
        items:
          type: "string"
      errors:
        type: "array"
        items:
          type: "string"
      fileKeys:
        type: "array"
        items:
          type: "string"
      outputs:
        type: "array"
        items:
          $ref: "#/definitions/TestFileOutput"
  SystemValues:
    type: "object"
    properties:
      claimType:
        type: "array"
        description: "[{id: 1, description: \"Test\"}, {id: 2, description: \"Test\
          \ 2\"}]"
        items:
          $ref: "#/definitions/SystemValues_ClaimType"
      recipientType:
        type: "array"
        description: "[{id: 1, description: \"Test\"}, {id: 2, description: \"Test\
          \ 2\"}]"
        items:
          $ref: "#/definitions/SystemValues_RecipientType"
      documentType:
        type: "array"
        description: "[{id: 1, description: \"Test\"}, {id: 2, description: \"Test\
          \ 2\"}]"
        items:
          $ref: "#/definitions/SystemValues_DocumentType"
      insertType:
        type: "array"
        description: "[{id: 1, description: \"Test\"}, {id: 2, description: \"Test\
          \ 2\"}]"
        items:
          $ref: "#/definitions/SystemValues_InsertType"
      extraInsertsForm:
        type: "array"
        description: "[{id: 1, description: \"Test\"}, {id: 2, description: \"Test\
          \ 2\"}]"
        items:
          $ref: "#/definitions/SystemValues_ExtraInsertsForm"
  SystemValuesResponse:
    type: "object"
    required:
    - "data"
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        $ref: "#/definitions/SystemValues"
  Messages:
    type: "object"
    required:
    - "endDate"
    - "id"
    - "startDate"
    properties:
      id:
        type: "integer"
        format: "int32"
        description: "Unique ID for the message"
      title:
        type: "string"
        description: "Subject of the message"
      startDate:
        type: "string"
        format: "date-time"
        description: "Message start date"
      endDate:
        type: "string"
        format: "date-time"
        description: "Message Expiration date"
      userType:
        type: "string"
        description: "Internal, External, All. Default all"
      message:
        type: "string"
        description: "Actual Message"
  MessageResponse:
    type: "object"
    required:
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        type: "array"
        items:
          $ref: "#/definitions/Messages"
  RuleTypeSingle:
    type: "object"
    required:
    - "ruleTypeId"
    - "ruleTypeName"
    - "ruleTypeNo"
    properties:
      ruleTypeNo:
        type: "integer"
        format: "int64"
      ruleTypeId:
        type: "string"
      ruleTypeName:
        type: "string"
  EmployerGroupPost:
    type: "object"
    required:
    - "clientID"
    - "desc"
    - "hierarchy1"
    - "isActive"
    properties:
      clientID:
        type: "integer"
        format: "int64"
      desc:
        type: "string"
        description: "groupName"
      isActive:
        type: "string"
        description: "Y/N/T"
      hierarchy1:
        type: "string"
        description: "_ABF_ALL_"
      hierarchy2:
        type: "string"
      hierarchy3:
        type: "string"
      hierarchy4:
        type: "string"
      hierarchy5:
        type: "string"
      hierarchy6:
        type: "string"
  EGPutStatus:
    type: "object"
    required:
    - "groupId"
    - "isActive"
    properties:
      groupId:
        type: "integer"
        format: "int64"
      isActive:
        type: "string"
        description: "Y/N"
  EmployerGroupSingle:
    type: "object"
    required:
    - "clientID"
    - "desc"
    - "groupId"
    - "hierarchy1"
    - "isActive"
    - "lastModified"
    - "lastModifier"
    properties:
      clientID:
        type: "integer"
        format: "int64"
      groupId:
        type: "integer"
        format: "int64"
      desc:
        type: "string"
        description: "groupName"
      isActive:
        type: "string"
        description: "Y/N/T"
      hierarchy1:
        type: "string"
        description: "_ABF_ALL_"
      hierarchy2:
        type: "string"
      hierarchy3:
        type: "string"
      hierarchy4:
        type: "string"
      hierarchy5:
        type: "string"
      hierarchy6:
        type: "string"
      ruleAssociations:
        type: "array"
        description: "This is under discussion, but would make the front end have\
          \ less calls to make.  Canw e do this?"
        items:
          $ref: "#/definitions/groupAssociation"
      lastModified:
        type: "string"
      lastModifier:
        type: "string"
  GroupAssociationsResponse:
    type: "object"
    required:
    - "data"
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        type: "array"
        items:
          $ref: "#/definitions/groupAssociation"
  groupAssociation:
    type: "object"
    required:
    - "groupId"
    - "groupRuleMapId"
    - "groupRuleMapStatus"
    - "ruleDesc"
    - "ruleId"
    - "ruleStatus"
    - "ruleTypeId"
    - "ruleVersion"
    properties:
      groupRuleMapId:
        type: "number"
        format: "double"
        description: "Association Id?"
      groupId:
        type: "string"
      ruleId:
        type: "string"
      ruleTypeId:
        type: "string"
      ruleDesc:
        type: "string"
      groupRuleMapStatus:
        type: "string"
      groupName:
        type: "string"
      ruleVersion:
        type: "string"
      ruleStatus:
        type: "string"
  RuleAssociationsResponse:
    type: "object"
    required:
    - "data"
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        type: "array"
        items:
          $ref: "#/definitions/ruleAssociation"
    description: "Response for All groups for a given rule"
  ruleAssociation:
    type: "object"
    required:
    - "groupId"
    - "groupRuleMapId"
    - "groupRuleMapStatus"
    properties:
      groupRuleMapId:
        type: "number"
        format: "double"
        description: "Association Id?"
      groupId:
        type: "string"
      groupRuleMapStatus:
        type: "string"
      groupName:
        type: "string"
  associationDetail:
    type: "object"
    required:
    - "groupId"
    - "ruleId"
    - "ruleType"
    properties:
      groupId:
        type: "string"
      ruleId:
        type: "string"
      ruleType:
        type: "string"
  StandardResponse:
    type: "object"
    required:
    - "data"
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          type: "string"
      data:
        type: "array"
        items:
          $ref: "#/definitions/StandardResponse_Data"
      total:
        type: "integer"
        format: "int32"
      offset:
        type: "integer"
        format: "int32"
      limit:
        type: "integer"
        format: "int32"
  ErrorResponse:
    type: "object"
    required:
    - "messages"
    - "status"
    - "statusCode"
    properties:
      status:
        type: "string"
      statusCode:
        type: "number"
        format: "double"
      messages:
        type: "array"
        items:
          type: "string"
  anonymousRepresentation12_Fields:
    type: "object"
    properties:
      ruleID:
        type: "string"
      ruleVersion:
        type: "string"
  AuthTokenResponse_Messages:
    type: "object"
  ContextProfileData_Profile:
    type: "object"
    required:
    - "email"
    - "firstName"
    - "lastName"
    - "userName"
    - "userType"
    properties:
      userName:
        type: "string"
      userType:
        type: "string"
        description: "Internal or External"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      company:
        type: "string"
        description: "Ex: Change Healthcare"
  ContextProfileData_Ucws:
    type: "object"
    required:
    - "clientLayoutId"
    - "clientLayoutName"
    - "cwId"
    - "roleIds"
    - "ucwId"
    - "webGroupId"
    - "webGroupName"
    properties:
      ucwId:
        type: "number"
        format: "double"
      clientLayoutId:
        type: "string"
      clientLayoutName:
        type: "string"
      webGroupId:
        type: "string"
      webGroupName:
        type: "string"
      roleIds:
        type: "array"
        items:
          type: "number"
          format: "double"
      cwId:
        type: "number"
        format: "double"
  ContextProfileData_RolePermissions:
    type: "object"
    required:
    - "roleId"
    - "roleName"
    properties:
      roleId:
        type: "number"
        format: "double"
      roleName:
        type: "string"
      permissions:
        type: "array"
        items:
          $ref: "#/definitions/ContextProfileData_RolePermissions_Permissions"
  ContextProfileData_RolePermissions_Permissions:
    type: "object"
    required:
    - "permissionDescription"
    - "permissionId"
    - "permissionName"
    properties:
      permissionId:
        type: "number"
        format: "double"
      permissionName:
        type: "string"
      permissionDescription:
        type: "string"
  LogoutResponse_Messages:
    type: "object"
  ContextResponse_Messages:
    type: "object"
  getClientDropdowns_Options:
    type: "object"
    required:
    - "key"
    - "value"
    properties:
      key:
        type: "string"
      value:
        type: "string"
  FilePost_Group:
    type: "object"
    required:
    - "groupId"
    - "groupName"
    properties:
      groupId:
        type: "string"
      groupName:
        type: "string"
  ErrorsDetailInfoListResponse_Data:
    type: "object"
    required:
    - "errInfo"
    - "errKey"
    - "infoDetail"
    - "recvDate"
    properties:
      errKey:
        type: "string"
        description: "400002820160331M1000002"
      errInfo:
        type: "string"
      recvDate:
        type: "string"
        format: "date-time"
        description: "1/12/2017 12:50:26 AM"
      infoDetail:
        $ref: "#/definitions/ErrorsDetailInfoDetailResponse"
  ErrorsDetailInfoDetailResponse_Data:
    type: "object"
    required:
    - "errCode"
    - "errDesc"
    - "errDetailInfo"
    - "errResolution"
    - "severity"
    properties:
      errCode:
        type: "integer"
        format: "int32"
      severity:
        type: "string"
      errDesc:
        type: "string"
      errResolution:
        type: "string"
      errDetailInfo:
        type: "string"
  UserProperty_Entries:
    type: "object"
    properties:
      roleId:
        type: "string"
      dataSrcId:
        type: "string"
  role_Permissions:
    type: "object"
    required:
    - "desc"
    - "id"
    - "name"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      desc:
        type: "string"
  TestFileOutput_Pdfs:
    type: "object"
    required:
    - "exists"
    - "id"
    properties:
      id:
        type: "string"
      exists:
        type: "string"
        description: "\"Y\" or \"N\""
  SystemValues_ClaimType:
    type: "object"
  SystemValues_RecipientType:
    type: "object"
  SystemValues_DocumentType:
    type: "object"
  SystemValues_InsertType:
    type: "object"
  SystemValues_ExtraInsertsForm:
    type: "object"
  StandardResponse_Data:
    type: "object"
